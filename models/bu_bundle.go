// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/volatiletech/sqlboiler/v4/types"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BuBundle is an object representing the database table.
type BuBundle struct {
	BuID         int           `boil:"bu_id" json:"bu_id" toml:"bu_id" yaml:"bu_id"`
	BuCompanyID  int           `boil:"bu_company_id" json:"bu_company_id" toml:"bu_company_id" yaml:"bu_company_id"`
	BuName       string        `boil:"bu_name" json:"bu_name" toml:"bu_name" yaml:"bu_name"`
	BuPrice      types.Decimal `boil:"bu_price" json:"bu_price" toml:"bu_price" yaml:"bu_price"`
	BuCreateTime time.Time     `boil:"bu_create_time" json:"bu_create_time" toml:"bu_create_time" yaml:"bu_create_time"`
	BuUpdateTime time.Time     `boil:"bu_update_time" json:"bu_update_time" toml:"bu_update_time" yaml:"bu_update_time"`
	BuDeleted    null.Bool     `boil:"bu_deleted" json:"bu_deleted,omitempty" toml:"bu_deleted" yaml:"bu_deleted,omitempty"`

	R *buBundleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L buBundleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BuBundleColumns = struct {
	BuID         string
	BuCompanyID  string
	BuName       string
	BuPrice      string
	BuCreateTime string
	BuUpdateTime string
	BuDeleted    string
}{
	BuID:         "bu_id",
	BuCompanyID:  "bu_company_id",
	BuName:       "bu_name",
	BuPrice:      "bu_price",
	BuCreateTime: "bu_create_time",
	BuUpdateTime: "bu_update_time",
	BuDeleted:    "bu_deleted",
}

var BuBundleTableColumns = struct {
	BuID         string
	BuCompanyID  string
	BuName       string
	BuPrice      string
	BuCreateTime string
	BuUpdateTime string
	BuDeleted    string
}{
	BuID:         "bu_bundle.bu_id",
	BuCompanyID:  "bu_bundle.bu_company_id",
	BuName:       "bu_bundle.bu_name",
	BuPrice:      "bu_bundle.bu_price",
	BuCreateTime: "bu_bundle.bu_create_time",
	BuUpdateTime: "bu_bundle.bu_update_time",
	BuDeleted:    "bu_bundle.bu_deleted",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertypes_Decimal struct{ field string }

func (w whereHelpertypes_Decimal) EQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Decimal) NEQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Decimal) LT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Decimal) LTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Decimal) GT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Decimal) GTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var BuBundleWhere = struct {
	BuID         whereHelperint
	BuCompanyID  whereHelperint
	BuName       whereHelperstring
	BuPrice      whereHelpertypes_Decimal
	BuCreateTime whereHelpertime_Time
	BuUpdateTime whereHelpertime_Time
	BuDeleted    whereHelpernull_Bool
}{
	BuID:         whereHelperint{field: "[products].[bu_bundle].[bu_id]"},
	BuCompanyID:  whereHelperint{field: "[products].[bu_bundle].[bu_company_id]"},
	BuName:       whereHelperstring{field: "[products].[bu_bundle].[bu_name]"},
	BuPrice:      whereHelpertypes_Decimal{field: "[products].[bu_bundle].[bu_price]"},
	BuCreateTime: whereHelpertime_Time{field: "[products].[bu_bundle].[bu_create_time]"},
	BuUpdateTime: whereHelpertime_Time{field: "[products].[bu_bundle].[bu_update_time]"},
	BuDeleted:    whereHelpernull_Bool{field: "[products].[bu_bundle].[bu_deleted]"},
}

// BuBundleRels is where relationship names are stored.
var BuBundleRels = struct {
	BeFKBundleBeBundleElements string
}{
	BeFKBundleBeBundleElements: "BeFKBundleBeBundleElements",
}

// buBundleR is where relationships are stored.
type buBundleR struct {
	BeFKBundleBeBundleElements BeBundleElementSlice `boil:"BeFKBundleBeBundleElements" json:"BeFKBundleBeBundleElements" toml:"BeFKBundleBeBundleElements" yaml:"BeFKBundleBeBundleElements"`
}

// NewStruct creates a new relationship struct
func (*buBundleR) NewStruct() *buBundleR {
	return &buBundleR{}
}

func (r *buBundleR) GetBeFKBundleBeBundleElements() BeBundleElementSlice {
	if r == nil {
		return nil
	}
	return r.BeFKBundleBeBundleElements
}

// buBundleL is where Load methods for each relationship are stored.
type buBundleL struct{}

var (
	buBundleAllColumns            = []string{"bu_id", "bu_company_id", "bu_name", "bu_price", "bu_create_time", "bu_update_time", "bu_deleted"}
	buBundleColumnsWithoutDefault = []string{"bu_company_id", "bu_name", "bu_price"}
	buBundleColumnsWithDefault    = []string{"bu_id", "bu_create_time", "bu_update_time", "bu_deleted"}
	buBundlePrimaryKeyColumns     = []string{"bu_id"}
	buBundleGeneratedColumns      = []string{"bu_id"}
)

type (
	// BuBundleSlice is an alias for a slice of pointers to BuBundle.
	// This should almost always be used instead of []BuBundle.
	BuBundleSlice []*BuBundle
	// BuBundleHook is the signature for custom BuBundle hook methods
	BuBundleHook func(context.Context, boil.ContextExecutor, *BuBundle) error

	buBundleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	buBundleType                 = reflect.TypeOf(&BuBundle{})
	buBundleMapping              = queries.MakeStructMapping(buBundleType)
	buBundlePrimaryKeyMapping, _ = queries.BindMapping(buBundleType, buBundleMapping, buBundlePrimaryKeyColumns)
	buBundleInsertCacheMut       sync.RWMutex
	buBundleInsertCache          = make(map[string]insertCache)
	buBundleUpdateCacheMut       sync.RWMutex
	buBundleUpdateCache          = make(map[string]updateCache)
	buBundleUpsertCacheMut       sync.RWMutex
	buBundleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var buBundleAfterSelectHooks []BuBundleHook

var buBundleBeforeInsertHooks []BuBundleHook
var buBundleAfterInsertHooks []BuBundleHook

var buBundleBeforeUpdateHooks []BuBundleHook
var buBundleAfterUpdateHooks []BuBundleHook

var buBundleBeforeDeleteHooks []BuBundleHook
var buBundleAfterDeleteHooks []BuBundleHook

var buBundleBeforeUpsertHooks []BuBundleHook
var buBundleAfterUpsertHooks []BuBundleHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BuBundle) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range buBundleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BuBundle) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range buBundleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BuBundle) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range buBundleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BuBundle) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range buBundleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BuBundle) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range buBundleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BuBundle) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range buBundleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BuBundle) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range buBundleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BuBundle) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range buBundleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BuBundle) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range buBundleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBuBundleHook registers your hook function for all future operations.
func AddBuBundleHook(hookPoint boil.HookPoint, buBundleHook BuBundleHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		buBundleAfterSelectHooks = append(buBundleAfterSelectHooks, buBundleHook)
	case boil.BeforeInsertHook:
		buBundleBeforeInsertHooks = append(buBundleBeforeInsertHooks, buBundleHook)
	case boil.AfterInsertHook:
		buBundleAfterInsertHooks = append(buBundleAfterInsertHooks, buBundleHook)
	case boil.BeforeUpdateHook:
		buBundleBeforeUpdateHooks = append(buBundleBeforeUpdateHooks, buBundleHook)
	case boil.AfterUpdateHook:
		buBundleAfterUpdateHooks = append(buBundleAfterUpdateHooks, buBundleHook)
	case boil.BeforeDeleteHook:
		buBundleBeforeDeleteHooks = append(buBundleBeforeDeleteHooks, buBundleHook)
	case boil.AfterDeleteHook:
		buBundleAfterDeleteHooks = append(buBundleAfterDeleteHooks, buBundleHook)
	case boil.BeforeUpsertHook:
		buBundleBeforeUpsertHooks = append(buBundleBeforeUpsertHooks, buBundleHook)
	case boil.AfterUpsertHook:
		buBundleAfterUpsertHooks = append(buBundleAfterUpsertHooks, buBundleHook)
	}
}

// One returns a single buBundle record from the query.
func (q buBundleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BuBundle, error) {
	o := &BuBundle{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bu_bundle")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BuBundle records from the query.
func (q buBundleQuery) All(ctx context.Context, exec boil.ContextExecutor) (BuBundleSlice, error) {
	var o []*BuBundle

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BuBundle slice")
	}

	if len(buBundleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BuBundle records in the query.
func (q buBundleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bu_bundle rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q buBundleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bu_bundle exists")
	}

	return count > 0, nil
}

// BeFKBundleBeBundleElements retrieves all the be_bundle_element's BeBundleElements with an executor via be_fk_bundle_id column.
func (o *BuBundle) BeFKBundleBeBundleElements(mods ...qm.QueryMod) beBundleElementQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("[products].[be_bundle_element].[be_fk_bundle_id]=?", o.BuID),
	)

	return BeBundleElements(queryMods...)
}

// LoadBeFKBundleBeBundleElements allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (buBundleL) LoadBeFKBundleBeBundleElements(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBuBundle interface{}, mods queries.Applicator) error {
	var slice []*BuBundle
	var object *BuBundle

	if singular {
		var ok bool
		object, ok = maybeBuBundle.(*BuBundle)
		if !ok {
			object = new(BuBundle)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBuBundle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBuBundle))
			}
		}
	} else {
		s, ok := maybeBuBundle.(*[]*BuBundle)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBuBundle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBuBundle))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &buBundleR{}
		}
		args = append(args, object.BuID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &buBundleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BuID) {
					continue Outer
				}
			}

			args = append(args, obj.BuID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products.be_bundle_element`),
		qm.WhereIn(`products.be_bundle_element.be_fk_bundle_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load be_bundle_element")
	}

	var resultSlice []*BeBundleElement
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice be_bundle_element")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on be_bundle_element")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for be_bundle_element")
	}

	if len(beBundleElementAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BeFKBundleBeBundleElements = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &beBundleElementR{}
			}
			foreign.R.BeFKBundle = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BuID, foreign.BeFKBundleID) {
				local.R.BeFKBundleBeBundleElements = append(local.R.BeFKBundleBeBundleElements, foreign)
				if foreign.R == nil {
					foreign.R = &beBundleElementR{}
				}
				foreign.R.BeFKBundle = local
				break
			}
		}
	}

	return nil
}

// AddBeFKBundleBeBundleElements adds the given related objects to the existing relationships
// of the bu_bundle, optionally inserting them as new records.
// Appends related to o.R.BeFKBundleBeBundleElements.
// Sets related.R.BeFKBundle appropriately.
func (o *BuBundle) AddBeFKBundleBeBundleElements(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BeBundleElement) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BeFKBundleID, o.BuID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE [products].[be_bundle_element] SET %s WHERE %s",
				strmangle.SetParamNames("[", "]", 1, []string{"be_fk_bundle_id"}),
				strmangle.WhereClause("[", "]", 2, beBundleElementPrimaryKeyColumns),
			)
			values := []interface{}{o.BuID, rel.BeID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BeFKBundleID, o.BuID)
		}
	}

	if o.R == nil {
		o.R = &buBundleR{
			BeFKBundleBeBundleElements: related,
		}
	} else {
		o.R.BeFKBundleBeBundleElements = append(o.R.BeFKBundleBeBundleElements, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &beBundleElementR{
				BeFKBundle: o,
			}
		} else {
			rel.R.BeFKBundle = o
		}
	}
	return nil
}

// SetBeFKBundleBeBundleElements removes all previously related items of the
// bu_bundle replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BeFKBundle's BeFKBundleBeBundleElements accordingly.
// Replaces o.R.BeFKBundleBeBundleElements with related.
// Sets related.R.BeFKBundle's BeFKBundleBeBundleElements accordingly.
func (o *BuBundle) SetBeFKBundleBeBundleElements(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BeBundleElement) error {
	query := "update [products].[be_bundle_element] set [be_fk_bundle_id] = null where [be_fk_bundle_id] = $1"
	values := []interface{}{o.BuID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BeFKBundleBeBundleElements {
			queries.SetScanner(&rel.BeFKBundleID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.BeFKBundle = nil
		}
		o.R.BeFKBundleBeBundleElements = nil
	}

	return o.AddBeFKBundleBeBundleElements(ctx, exec, insert, related...)
}

// RemoveBeFKBundleBeBundleElements relationships from objects passed in.
// Removes related items from R.BeFKBundleBeBundleElements (uses pointer comparison, removal does not keep order)
// Sets related.R.BeFKBundle.
func (o *BuBundle) RemoveBeFKBundleBeBundleElements(ctx context.Context, exec boil.ContextExecutor, related ...*BeBundleElement) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BeFKBundleID, nil)
		if rel.R != nil {
			rel.R.BeFKBundle = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("be_fk_bundle_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BeFKBundleBeBundleElements {
			if rel != ri {
				continue
			}

			ln := len(o.R.BeFKBundleBeBundleElements)
			if ln > 1 && i < ln-1 {
				o.R.BeFKBundleBeBundleElements[i] = o.R.BeFKBundleBeBundleElements[ln-1]
			}
			o.R.BeFKBundleBeBundleElements = o.R.BeFKBundleBeBundleElements[:ln-1]
			break
		}
	}

	return nil
}

// BuBundles retrieves all the records using an executor.
func BuBundles(mods ...qm.QueryMod) buBundleQuery {
	mods = append(mods, qm.From("[products].[bu_bundle]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[products].[bu_bundle].*"})
	}

	return buBundleQuery{q}
}

// FindBuBundle retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBuBundle(ctx context.Context, exec boil.ContextExecutor, buID int, selectCols ...string) (*BuBundle, error) {
	buBundleObj := &BuBundle{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [products].[bu_bundle] where [bu_id]=$1", sel,
	)

	q := queries.Raw(query, buID)

	err := q.Bind(ctx, exec, buBundleObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bu_bundle")
	}

	if err = buBundleObj.doAfterSelectHooks(ctx, exec); err != nil {
		return buBundleObj, err
	}

	return buBundleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BuBundle) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bu_bundle provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(buBundleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	buBundleInsertCacheMut.RLock()
	cache, cached := buBundleInsertCache[key]
	buBundleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			buBundleAllColumns,
			buBundleColumnsWithDefault,
			buBundleColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, buBundleGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(buBundleType, buBundleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(buBundleType, buBundleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [products].[bu_bundle] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [products].[bu_bundle] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bu_bundle")
	}

	if !cached {
		buBundleInsertCacheMut.Lock()
		buBundleInsertCache[key] = cache
		buBundleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BuBundle.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BuBundle) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	buBundleUpdateCacheMut.RLock()
	cache, cached := buBundleUpdateCache[key]
	buBundleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			buBundleAllColumns,
			buBundlePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, buBundleGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bu_bundle, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [products].[bu_bundle] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, buBundlePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(buBundleType, buBundleMapping, append(wl, buBundlePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bu_bundle row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bu_bundle")
	}

	if !cached {
		buBundleUpdateCacheMut.Lock()
		buBundleUpdateCache[key] = cache
		buBundleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q buBundleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bu_bundle")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bu_bundle")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BuBundleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), buBundlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [products].[bu_bundle] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, buBundlePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in buBundle slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all buBundle")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *BuBundle) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bu_bundle provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(buBundleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	buBundleUpsertCacheMut.RLock()
	cache, cached := buBundleUpsertCache[key]
	buBundleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			buBundleAllColumns,
			buBundleColumnsWithDefault,
			buBundleColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, buBundleGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(buBundlePrimaryKeyColumns, v) && strmangle.ContainsAny(buBundleColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert bu_bundle, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			buBundleAllColumns,
			buBundlePrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, buBundleGeneratedColumns)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert bu_bundle, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[products].[bu_bundle]", buBundlePrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(buBundlePrimaryKeyColumns))
		copy(whitelist, buBundlePrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(buBundleType, buBundleMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(buBundleType, buBundleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert bu_bundle")
	}

	if !cached {
		buBundleUpsertCacheMut.Lock()
		buBundleUpsertCache[key] = cache
		buBundleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BuBundle record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BuBundle) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BuBundle provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), buBundlePrimaryKeyMapping)
	sql := "DELETE FROM [products].[bu_bundle] WHERE [bu_id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bu_bundle")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bu_bundle")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q buBundleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no buBundleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bu_bundle")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bu_bundle")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BuBundleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(buBundleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), buBundlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [products].[bu_bundle] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, buBundlePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from buBundle slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bu_bundle")
	}

	if len(buBundleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BuBundle) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBuBundle(ctx, exec, o.BuID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BuBundleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BuBundleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), buBundlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [products].[bu_bundle].* FROM [products].[bu_bundle] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, buBundlePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BuBundleSlice")
	}

	*o = slice

	return nil
}

// BuBundleExists checks if the BuBundle row exists.
func BuBundleExists(ctx context.Context, exec boil.ContextExecutor, buID int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [products].[bu_bundle] where [bu_id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, buID)
	}
	row := exec.QueryRowContext(ctx, sql, buID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bu_bundle exists")
	}

	return exists, nil
}

// Exists checks if the BuBundle row exists.
func (o *BuBundle) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BuBundleExists(ctx, exec, o.BuID)
}
