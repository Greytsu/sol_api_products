// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PRProduct is an object representing the database table.
type PRProduct struct {
	PRID         int       `boil:"pr_id" json:"pr_id" toml:"pr_id" yaml:"pr_id"`
	PRCompanyID  int       `boil:"pr_company_id" json:"pr_company_id" toml:"pr_company_id" yaml:"pr_company_id"`
	PRName       string    `boil:"pr_name" json:"pr_name" toml:"pr_name" yaml:"pr_name"`
	PRType       string    `boil:"pr_type" json:"pr_type" toml:"pr_type" yaml:"pr_type"`
	PRCreateTime time.Time `boil:"pr_create_time" json:"pr_create_time" toml:"pr_create_time" yaml:"pr_create_time"`
	PRUpdateTime time.Time `boil:"pr_update_time" json:"pr_update_time" toml:"pr_update_time" yaml:"pr_update_time"`
	PRDeleted    null.Bool `boil:"pr_deleted" json:"pr_deleted,omitempty" toml:"pr_deleted" yaml:"pr_deleted,omitempty"`

	R *prProductR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L prProductL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PRProductColumns = struct {
	PRID         string
	PRCompanyID  string
	PRName       string
	PRType       string
	PRCreateTime string
	PRUpdateTime string
	PRDeleted    string
}{
	PRID:         "pr_id",
	PRCompanyID:  "pr_company_id",
	PRName:       "pr_name",
	PRType:       "pr_type",
	PRCreateTime: "pr_create_time",
	PRUpdateTime: "pr_update_time",
	PRDeleted:    "pr_deleted",
}

var PRProductTableColumns = struct {
	PRID         string
	PRCompanyID  string
	PRName       string
	PRType       string
	PRCreateTime string
	PRUpdateTime string
	PRDeleted    string
}{
	PRID:         "pr_product.pr_id",
	PRCompanyID:  "pr_product.pr_company_id",
	PRName:       "pr_product.pr_name",
	PRType:       "pr_product.pr_type",
	PRCreateTime: "pr_product.pr_create_time",
	PRUpdateTime: "pr_product.pr_update_time",
	PRDeleted:    "pr_product.pr_deleted",
}

// Generated where

var PRProductWhere = struct {
	PRID         whereHelperint
	PRCompanyID  whereHelperint
	PRName       whereHelperstring
	PRType       whereHelperstring
	PRCreateTime whereHelpertime_Time
	PRUpdateTime whereHelpertime_Time
	PRDeleted    whereHelpernull_Bool
}{
	PRID:         whereHelperint{field: "[products].[pr_product].[pr_id]"},
	PRCompanyID:  whereHelperint{field: "[products].[pr_product].[pr_company_id]"},
	PRName:       whereHelperstring{field: "[products].[pr_product].[pr_name]"},
	PRType:       whereHelperstring{field: "[products].[pr_product].[pr_type]"},
	PRCreateTime: whereHelpertime_Time{field: "[products].[pr_product].[pr_create_time]"},
	PRUpdateTime: whereHelpertime_Time{field: "[products].[pr_product].[pr_update_time]"},
	PRDeleted:    whereHelpernull_Bool{field: "[products].[pr_product].[pr_deleted]"},
}

// PRProductRels is where relationship names are stored.
var PRProductRels = struct {
	OpFKProductOpOptions string
}{
	OpFKProductOpOptions: "OpFKProductOpOptions",
}

// prProductR is where relationships are stored.
type prProductR struct {
	OpFKProductOpOptions OpOptionSlice `boil:"OpFKProductOpOptions" json:"OpFKProductOpOptions" toml:"OpFKProductOpOptions" yaml:"OpFKProductOpOptions"`
}

// NewStruct creates a new relationship struct
func (*prProductR) NewStruct() *prProductR {
	return &prProductR{}
}

func (r *prProductR) GetOpFKProductOpOptions() OpOptionSlice {
	if r == nil {
		return nil
	}
	return r.OpFKProductOpOptions
}

// prProductL is where Load methods for each relationship are stored.
type prProductL struct{}

var (
	prProductAllColumns            = []string{"pr_id", "pr_company_id", "pr_name", "pr_type", "pr_create_time", "pr_update_time", "pr_deleted"}
	prProductColumnsWithoutDefault = []string{"pr_company_id", "pr_name", "pr_type"}
	prProductColumnsWithDefault    = []string{"pr_id", "pr_create_time", "pr_update_time", "pr_deleted"}
	prProductPrimaryKeyColumns     = []string{"pr_id"}
	prProductGeneratedColumns      = []string{"pr_id"}
)

type (
	// PRProductSlice is an alias for a slice of pointers to PRProduct.
	// This should almost always be used instead of []PRProduct.
	PRProductSlice []*PRProduct
	// PRProductHook is the signature for custom PRProduct hook methods
	PRProductHook func(context.Context, boil.ContextExecutor, *PRProduct) error

	prProductQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	prProductType                 = reflect.TypeOf(&PRProduct{})
	prProductMapping              = queries.MakeStructMapping(prProductType)
	prProductPrimaryKeyMapping, _ = queries.BindMapping(prProductType, prProductMapping, prProductPrimaryKeyColumns)
	prProductInsertCacheMut       sync.RWMutex
	prProductInsertCache          = make(map[string]insertCache)
	prProductUpdateCacheMut       sync.RWMutex
	prProductUpdateCache          = make(map[string]updateCache)
	prProductUpsertCacheMut       sync.RWMutex
	prProductUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var prProductAfterSelectHooks []PRProductHook

var prProductBeforeInsertHooks []PRProductHook
var prProductAfterInsertHooks []PRProductHook

var prProductBeforeUpdateHooks []PRProductHook
var prProductAfterUpdateHooks []PRProductHook

var prProductBeforeDeleteHooks []PRProductHook
var prProductAfterDeleteHooks []PRProductHook

var prProductBeforeUpsertHooks []PRProductHook
var prProductAfterUpsertHooks []PRProductHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PRProduct) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prProductAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PRProduct) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prProductBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PRProduct) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prProductAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PRProduct) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prProductBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PRProduct) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prProductAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PRProduct) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prProductBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PRProduct) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prProductAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PRProduct) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prProductBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PRProduct) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prProductAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPRProductHook registers your hook function for all future operations.
func AddPRProductHook(hookPoint boil.HookPoint, prProductHook PRProductHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		prProductAfterSelectHooks = append(prProductAfterSelectHooks, prProductHook)
	case boil.BeforeInsertHook:
		prProductBeforeInsertHooks = append(prProductBeforeInsertHooks, prProductHook)
	case boil.AfterInsertHook:
		prProductAfterInsertHooks = append(prProductAfterInsertHooks, prProductHook)
	case boil.BeforeUpdateHook:
		prProductBeforeUpdateHooks = append(prProductBeforeUpdateHooks, prProductHook)
	case boil.AfterUpdateHook:
		prProductAfterUpdateHooks = append(prProductAfterUpdateHooks, prProductHook)
	case boil.BeforeDeleteHook:
		prProductBeforeDeleteHooks = append(prProductBeforeDeleteHooks, prProductHook)
	case boil.AfterDeleteHook:
		prProductAfterDeleteHooks = append(prProductAfterDeleteHooks, prProductHook)
	case boil.BeforeUpsertHook:
		prProductBeforeUpsertHooks = append(prProductBeforeUpsertHooks, prProductHook)
	case boil.AfterUpsertHook:
		prProductAfterUpsertHooks = append(prProductAfterUpsertHooks, prProductHook)
	}
}

// One returns a single prProduct record from the query.
func (q prProductQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PRProduct, error) {
	o := &PRProduct{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for pr_product")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PRProduct records from the query.
func (q prProductQuery) All(ctx context.Context, exec boil.ContextExecutor) (PRProductSlice, error) {
	var o []*PRProduct

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PRProduct slice")
	}

	if len(prProductAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PRProduct records in the query.
func (q prProductQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count pr_product rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q prProductQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if pr_product exists")
	}

	return count > 0, nil
}

// OpFKProductOpOptions retrieves all the op_option's OpOptions with an executor via op_fk_product_id column.
func (o *PRProduct) OpFKProductOpOptions(mods ...qm.QueryMod) opOptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("[products].[op_option].[op_fk_product_id]=?", o.PRID),
	)

	return OpOptions(queryMods...)
}

// LoadOpFKProductOpOptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (prProductL) LoadOpFKProductOpOptions(ctx context.Context, e boil.ContextExecutor, singular bool, maybePRProduct interface{}, mods queries.Applicator) error {
	var slice []*PRProduct
	var object *PRProduct

	if singular {
		var ok bool
		object, ok = maybePRProduct.(*PRProduct)
		if !ok {
			object = new(PRProduct)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePRProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePRProduct))
			}
		}
	} else {
		s, ok := maybePRProduct.(*[]*PRProduct)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePRProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePRProduct))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &prProductR{}
		}
		args = append(args, object.PRID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &prProductR{}
			}

			for _, a := range args {
				if a == obj.PRID {
					continue Outer
				}
			}

			args = append(args, obj.PRID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products.op_option`),
		qm.WhereIn(`products.op_option.op_fk_product_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load op_option")
	}

	var resultSlice []*OpOption
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice op_option")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on op_option")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for op_option")
	}

	if len(opOptionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OpFKProductOpOptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &opOptionR{}
			}
			foreign.R.OpFKProduct = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PRID == foreign.OpFKProductID {
				local.R.OpFKProductOpOptions = append(local.R.OpFKProductOpOptions, foreign)
				if foreign.R == nil {
					foreign.R = &opOptionR{}
				}
				foreign.R.OpFKProduct = local
				break
			}
		}
	}

	return nil
}

// AddOpFKProductOpOptions adds the given related objects to the existing relationships
// of the pr_product, optionally inserting them as new records.
// Appends related to o.R.OpFKProductOpOptions.
// Sets related.R.OpFKProduct appropriately.
func (o *PRProduct) AddOpFKProductOpOptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OpOption) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OpFKProductID = o.PRID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE [products].[op_option] SET %s WHERE %s",
				strmangle.SetParamNames("[", "]", 1, []string{"op_fk_product_id"}),
				strmangle.WhereClause("[", "]", 2, opOptionPrimaryKeyColumns),
			)
			values := []interface{}{o.PRID, rel.OpID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OpFKProductID = o.PRID
		}
	}

	if o.R == nil {
		o.R = &prProductR{
			OpFKProductOpOptions: related,
		}
	} else {
		o.R.OpFKProductOpOptions = append(o.R.OpFKProductOpOptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &opOptionR{
				OpFKProduct: o,
			}
		} else {
			rel.R.OpFKProduct = o
		}
	}
	return nil
}

// PRProducts retrieves all the records using an executor.
func PRProducts(mods ...qm.QueryMod) prProductQuery {
	mods = append(mods, qm.From("[products].[pr_product]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[products].[pr_product].*"})
	}

	return prProductQuery{q}
}

// FindPRProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPRProduct(ctx context.Context, exec boil.ContextExecutor, pRID int, selectCols ...string) (*PRProduct, error) {
	prProductObj := &PRProduct{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [products].[pr_product] where [pr_id]=$1", sel,
	)

	q := queries.Raw(query, pRID)

	err := q.Bind(ctx, exec, prProductObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from pr_product")
	}

	if err = prProductObj.doAfterSelectHooks(ctx, exec); err != nil {
		return prProductObj, err
	}

	return prProductObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PRProduct) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no pr_product provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(prProductColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	prProductInsertCacheMut.RLock()
	cache, cached := prProductInsertCache[key]
	prProductInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			prProductAllColumns,
			prProductColumnsWithDefault,
			prProductColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, prProductGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(prProductType, prProductMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(prProductType, prProductMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [products].[pr_product] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [products].[pr_product] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into pr_product")
	}

	if !cached {
		prProductInsertCacheMut.Lock()
		prProductInsertCache[key] = cache
		prProductInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PRProduct.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PRProduct) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	prProductUpdateCacheMut.RLock()
	cache, cached := prProductUpdateCache[key]
	prProductUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			prProductAllColumns,
			prProductPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, prProductGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update pr_product, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [products].[pr_product] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, prProductPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(prProductType, prProductMapping, append(wl, prProductPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update pr_product row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for pr_product")
	}

	if !cached {
		prProductUpdateCacheMut.Lock()
		prProductUpdateCache[key] = cache
		prProductUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q prProductQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for pr_product")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for pr_product")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PRProductSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), prProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [products].[pr_product] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, prProductPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in prProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all prProduct")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *PRProduct) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no pr_product provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(prProductColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	prProductUpsertCacheMut.RLock()
	cache, cached := prProductUpsertCache[key]
	prProductUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			prProductAllColumns,
			prProductColumnsWithDefault,
			prProductColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, prProductGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(prProductPrimaryKeyColumns, v) && strmangle.ContainsAny(prProductColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert pr_product, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			prProductAllColumns,
			prProductPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, prProductGeneratedColumns)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert pr_product, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[products].[pr_product]", prProductPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(prProductPrimaryKeyColumns))
		copy(whitelist, prProductPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(prProductType, prProductMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(prProductType, prProductMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert pr_product")
	}

	if !cached {
		prProductUpsertCacheMut.Lock()
		prProductUpsertCache[key] = cache
		prProductUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PRProduct record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PRProduct) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PRProduct provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), prProductPrimaryKeyMapping)
	sql := "DELETE FROM [products].[pr_product] WHERE [pr_id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from pr_product")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for pr_product")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q prProductQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no prProductQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pr_product")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pr_product")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PRProductSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(prProductBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), prProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [products].[pr_product] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, prProductPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from prProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pr_product")
	}

	if len(prProductAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PRProduct) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPRProduct(ctx, exec, o.PRID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PRProductSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PRProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), prProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [products].[pr_product].* FROM [products].[pr_product] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, prProductPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PRProductSlice")
	}

	*o = slice

	return nil
}

// PRProductExists checks if the PRProduct row exists.
func PRProductExists(ctx context.Context, exec boil.ContextExecutor, pRID int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [products].[pr_product] where [pr_id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, pRID)
	}
	row := exec.QueryRowContext(ctx, sql, pRID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if pr_product exists")
	}

	return exists, nil
}

// Exists checks if the PRProduct row exists.
func (o *PRProduct) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PRProductExists(ctx, exec, o.PRID)
}
