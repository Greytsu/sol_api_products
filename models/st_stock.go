// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// STStock is an object representing the database table.
type STStock struct {
	STID            int       `boil:"st_id" json:"st_id" toml:"st_id" yaml:"st_id"`
	STCompanyID     int       `boil:"st_company_id" json:"st_company_id" toml:"st_company_id" yaml:"st_company_id"`
	STFKWarehouseID null.Int  `boil:"st_fk_warehouse_id" json:"st_fk_warehouse_id,omitempty" toml:"st_fk_warehouse_id" yaml:"st_fk_warehouse_id,omitempty"`
	STFKOptionID    null.Int  `boil:"st_fk_option_id" json:"st_fk_option_id,omitempty" toml:"st_fk_option_id" yaml:"st_fk_option_id,omitempty"`
	STQuantity      int       `boil:"st_quantity" json:"st_quantity" toml:"st_quantity" yaml:"st_quantity"`
	STCreateTime    time.Time `boil:"st_create_time" json:"st_create_time" toml:"st_create_time" yaml:"st_create_time"`
	STUpdateTime    time.Time `boil:"st_update_time" json:"st_update_time" toml:"st_update_time" yaml:"st_update_time"`
	STDeleted       null.Bool `boil:"st_deleted" json:"st_deleted,omitempty" toml:"st_deleted" yaml:"st_deleted,omitempty"`

	R *stStockR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L stStockL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var STStockColumns = struct {
	STID            string
	STCompanyID     string
	STFKWarehouseID string
	STFKOptionID    string
	STQuantity      string
	STCreateTime    string
	STUpdateTime    string
	STDeleted       string
}{
	STID:            "st_id",
	STCompanyID:     "st_company_id",
	STFKWarehouseID: "st_fk_warehouse_id",
	STFKOptionID:    "st_fk_option_id",
	STQuantity:      "st_quantity",
	STCreateTime:    "st_create_time",
	STUpdateTime:    "st_update_time",
	STDeleted:       "st_deleted",
}

var STStockTableColumns = struct {
	STID            string
	STCompanyID     string
	STFKWarehouseID string
	STFKOptionID    string
	STQuantity      string
	STCreateTime    string
	STUpdateTime    string
	STDeleted       string
}{
	STID:            "st_stock.st_id",
	STCompanyID:     "st_stock.st_company_id",
	STFKWarehouseID: "st_stock.st_fk_warehouse_id",
	STFKOptionID:    "st_stock.st_fk_option_id",
	STQuantity:      "st_stock.st_quantity",
	STCreateTime:    "st_stock.st_create_time",
	STUpdateTime:    "st_stock.st_update_time",
	STDeleted:       "st_stock.st_deleted",
}

// Generated where

var STStockWhere = struct {
	STID            whereHelperint
	STCompanyID     whereHelperint
	STFKWarehouseID whereHelpernull_Int
	STFKOptionID    whereHelpernull_Int
	STQuantity      whereHelperint
	STCreateTime    whereHelpertime_Time
	STUpdateTime    whereHelpertime_Time
	STDeleted       whereHelpernull_Bool
}{
	STID:            whereHelperint{field: "[products].[st_stock].[st_id]"},
	STCompanyID:     whereHelperint{field: "[products].[st_stock].[st_company_id]"},
	STFKWarehouseID: whereHelpernull_Int{field: "[products].[st_stock].[st_fk_warehouse_id]"},
	STFKOptionID:    whereHelpernull_Int{field: "[products].[st_stock].[st_fk_option_id]"},
	STQuantity:      whereHelperint{field: "[products].[st_stock].[st_quantity]"},
	STCreateTime:    whereHelpertime_Time{field: "[products].[st_stock].[st_create_time]"},
	STUpdateTime:    whereHelpertime_Time{field: "[products].[st_stock].[st_update_time]"},
	STDeleted:       whereHelpernull_Bool{field: "[products].[st_stock].[st_deleted]"},
}

// STStockRels is where relationship names are stored.
var STStockRels = struct {
	STFKOption    string
	STFKWarehouse string
}{
	STFKOption:    "STFKOption",
	STFKWarehouse: "STFKWarehouse",
}

// stStockR is where relationships are stored.
type stStockR struct {
	STFKOption    *OpOption    `boil:"STFKOption" json:"STFKOption" toml:"STFKOption" yaml:"STFKOption"`
	STFKWarehouse *WaWarehouse `boil:"STFKWarehouse" json:"STFKWarehouse" toml:"STFKWarehouse" yaml:"STFKWarehouse"`
}

// NewStruct creates a new relationship struct
func (*stStockR) NewStruct() *stStockR {
	return &stStockR{}
}

func (r *stStockR) GetSTFKOption() *OpOption {
	if r == nil {
		return nil
	}
	return r.STFKOption
}

func (r *stStockR) GetSTFKWarehouse() *WaWarehouse {
	if r == nil {
		return nil
	}
	return r.STFKWarehouse
}

// stStockL is where Load methods for each relationship are stored.
type stStockL struct{}

var (
	stStockAllColumns            = []string{"st_id", "st_company_id", "st_fk_warehouse_id", "st_fk_option_id", "st_quantity", "st_create_time", "st_update_time", "st_deleted"}
	stStockColumnsWithoutDefault = []string{"st_company_id", "st_fk_warehouse_id", "st_fk_option_id", "st_quantity"}
	stStockColumnsWithDefault    = []string{"st_id", "st_create_time", "st_update_time", "st_deleted"}
	stStockPrimaryKeyColumns     = []string{"st_id"}
	stStockGeneratedColumns      = []string{"st_id"}
)

type (
	// STStockSlice is an alias for a slice of pointers to STStock.
	// This should almost always be used instead of []STStock.
	STStockSlice []*STStock
	// STStockHook is the signature for custom STStock hook methods
	STStockHook func(context.Context, boil.ContextExecutor, *STStock) error

	stStockQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	stStockType                 = reflect.TypeOf(&STStock{})
	stStockMapping              = queries.MakeStructMapping(stStockType)
	stStockPrimaryKeyMapping, _ = queries.BindMapping(stStockType, stStockMapping, stStockPrimaryKeyColumns)
	stStockInsertCacheMut       sync.RWMutex
	stStockInsertCache          = make(map[string]insertCache)
	stStockUpdateCacheMut       sync.RWMutex
	stStockUpdateCache          = make(map[string]updateCache)
	stStockUpsertCacheMut       sync.RWMutex
	stStockUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var stStockAfterSelectHooks []STStockHook

var stStockBeforeInsertHooks []STStockHook
var stStockAfterInsertHooks []STStockHook

var stStockBeforeUpdateHooks []STStockHook
var stStockAfterUpdateHooks []STStockHook

var stStockBeforeDeleteHooks []STStockHook
var stStockAfterDeleteHooks []STStockHook

var stStockBeforeUpsertHooks []STStockHook
var stStockAfterUpsertHooks []STStockHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *STStock) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stStockAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *STStock) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stStockBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *STStock) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stStockAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *STStock) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stStockBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *STStock) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stStockAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *STStock) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stStockBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *STStock) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stStockAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *STStock) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stStockBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *STStock) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stStockAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSTStockHook registers your hook function for all future operations.
func AddSTStockHook(hookPoint boil.HookPoint, stStockHook STStockHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		stStockAfterSelectHooks = append(stStockAfterSelectHooks, stStockHook)
	case boil.BeforeInsertHook:
		stStockBeforeInsertHooks = append(stStockBeforeInsertHooks, stStockHook)
	case boil.AfterInsertHook:
		stStockAfterInsertHooks = append(stStockAfterInsertHooks, stStockHook)
	case boil.BeforeUpdateHook:
		stStockBeforeUpdateHooks = append(stStockBeforeUpdateHooks, stStockHook)
	case boil.AfterUpdateHook:
		stStockAfterUpdateHooks = append(stStockAfterUpdateHooks, stStockHook)
	case boil.BeforeDeleteHook:
		stStockBeforeDeleteHooks = append(stStockBeforeDeleteHooks, stStockHook)
	case boil.AfterDeleteHook:
		stStockAfterDeleteHooks = append(stStockAfterDeleteHooks, stStockHook)
	case boil.BeforeUpsertHook:
		stStockBeforeUpsertHooks = append(stStockBeforeUpsertHooks, stStockHook)
	case boil.AfterUpsertHook:
		stStockAfterUpsertHooks = append(stStockAfterUpsertHooks, stStockHook)
	}
}

// One returns a single stStock record from the query.
func (q stStockQuery) One(ctx context.Context, exec boil.ContextExecutor) (*STStock, error) {
	o := &STStock{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for st_stock")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all STStock records from the query.
func (q stStockQuery) All(ctx context.Context, exec boil.ContextExecutor) (STStockSlice, error) {
	var o []*STStock

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to STStock slice")
	}

	if len(stStockAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all STStock records in the query.
func (q stStockQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count st_stock rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q stStockQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if st_stock exists")
	}

	return count > 0, nil
}

// STFKOption pointed to by the foreign key.
func (o *STStock) STFKOption(mods ...qm.QueryMod) opOptionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("[op_id] = ?", o.STFKOptionID),
	}

	queryMods = append(queryMods, mods...)

	return OpOptions(queryMods...)
}

// STFKWarehouse pointed to by the foreign key.
func (o *STStock) STFKWarehouse(mods ...qm.QueryMod) waWarehouseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("[wa_id] = ?", o.STFKWarehouseID),
	}

	queryMods = append(queryMods, mods...)

	return WaWarehouses(queryMods...)
}

// LoadSTFKOption allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stStockL) LoadSTFKOption(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSTStock interface{}, mods queries.Applicator) error {
	var slice []*STStock
	var object *STStock

	if singular {
		var ok bool
		object, ok = maybeSTStock.(*STStock)
		if !ok {
			object = new(STStock)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSTStock)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSTStock))
			}
		}
	} else {
		s, ok := maybeSTStock.(*[]*STStock)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSTStock)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSTStock))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stStockR{}
		}
		if !queries.IsNil(object.STFKOptionID) {
			args = append(args, object.STFKOptionID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stStockR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.STFKOptionID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.STFKOptionID) {
				args = append(args, obj.STFKOptionID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products.op_option`),
		qm.WhereIn(`products.op_option.op_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OpOption")
	}

	var resultSlice []*OpOption
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OpOption")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for op_option")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for op_option")
	}

	if len(opOptionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.STFKOption = foreign
		if foreign.R == nil {
			foreign.R = &opOptionR{}
		}
		foreign.R.STFKOptionSTStocks = append(foreign.R.STFKOptionSTStocks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.STFKOptionID, foreign.OpID) {
				local.R.STFKOption = foreign
				if foreign.R == nil {
					foreign.R = &opOptionR{}
				}
				foreign.R.STFKOptionSTStocks = append(foreign.R.STFKOptionSTStocks, local)
				break
			}
		}
	}

	return nil
}

// LoadSTFKWarehouse allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stStockL) LoadSTFKWarehouse(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSTStock interface{}, mods queries.Applicator) error {
	var slice []*STStock
	var object *STStock

	if singular {
		var ok bool
		object, ok = maybeSTStock.(*STStock)
		if !ok {
			object = new(STStock)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSTStock)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSTStock))
			}
		}
	} else {
		s, ok := maybeSTStock.(*[]*STStock)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSTStock)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSTStock))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stStockR{}
		}
		if !queries.IsNil(object.STFKWarehouseID) {
			args = append(args, object.STFKWarehouseID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stStockR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.STFKWarehouseID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.STFKWarehouseID) {
				args = append(args, obj.STFKWarehouseID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products.wa_warehouse`),
		qm.WhereIn(`products.wa_warehouse.wa_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load WaWarehouse")
	}

	var resultSlice []*WaWarehouse
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice WaWarehouse")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for wa_warehouse")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for wa_warehouse")
	}

	if len(waWarehouseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.STFKWarehouse = foreign
		if foreign.R == nil {
			foreign.R = &waWarehouseR{}
		}
		foreign.R.STFKWarehouseSTStocks = append(foreign.R.STFKWarehouseSTStocks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.STFKWarehouseID, foreign.WaID) {
				local.R.STFKWarehouse = foreign
				if foreign.R == nil {
					foreign.R = &waWarehouseR{}
				}
				foreign.R.STFKWarehouseSTStocks = append(foreign.R.STFKWarehouseSTStocks, local)
				break
			}
		}
	}

	return nil
}

// SetSTFKOption of the stStock to the related item.
// Sets o.R.STFKOption to related.
// Adds o to related.R.STFKOptionSTStocks.
func (o *STStock) SetSTFKOption(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OpOption) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE [products].[st_stock] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, []string{"st_fk_option_id"}),
		strmangle.WhereClause("[", "]", 2, stStockPrimaryKeyColumns),
	)
	values := []interface{}{related.OpID, o.STID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.STFKOptionID, related.OpID)
	if o.R == nil {
		o.R = &stStockR{
			STFKOption: related,
		}
	} else {
		o.R.STFKOption = related
	}

	if related.R == nil {
		related.R = &opOptionR{
			STFKOptionSTStocks: STStockSlice{o},
		}
	} else {
		related.R.STFKOptionSTStocks = append(related.R.STFKOptionSTStocks, o)
	}

	return nil
}

// RemoveSTFKOption relationship.
// Sets o.R.STFKOption to nil.
// Removes o from all passed in related items' relationships struct.
func (o *STStock) RemoveSTFKOption(ctx context.Context, exec boil.ContextExecutor, related *OpOption) error {
	var err error

	queries.SetScanner(&o.STFKOptionID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("st_fk_option_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.STFKOption = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.STFKOptionSTStocks {
		if queries.Equal(o.STFKOptionID, ri.STFKOptionID) {
			continue
		}

		ln := len(related.R.STFKOptionSTStocks)
		if ln > 1 && i < ln-1 {
			related.R.STFKOptionSTStocks[i] = related.R.STFKOptionSTStocks[ln-1]
		}
		related.R.STFKOptionSTStocks = related.R.STFKOptionSTStocks[:ln-1]
		break
	}
	return nil
}

// SetSTFKWarehouse of the stStock to the related item.
// Sets o.R.STFKWarehouse to related.
// Adds o to related.R.STFKWarehouseSTStocks.
func (o *STStock) SetSTFKWarehouse(ctx context.Context, exec boil.ContextExecutor, insert bool, related *WaWarehouse) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE [products].[st_stock] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, []string{"st_fk_warehouse_id"}),
		strmangle.WhereClause("[", "]", 2, stStockPrimaryKeyColumns),
	)
	values := []interface{}{related.WaID, o.STID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.STFKWarehouseID, related.WaID)
	if o.R == nil {
		o.R = &stStockR{
			STFKWarehouse: related,
		}
	} else {
		o.R.STFKWarehouse = related
	}

	if related.R == nil {
		related.R = &waWarehouseR{
			STFKWarehouseSTStocks: STStockSlice{o},
		}
	} else {
		related.R.STFKWarehouseSTStocks = append(related.R.STFKWarehouseSTStocks, o)
	}

	return nil
}

// RemoveSTFKWarehouse relationship.
// Sets o.R.STFKWarehouse to nil.
// Removes o from all passed in related items' relationships struct.
func (o *STStock) RemoveSTFKWarehouse(ctx context.Context, exec boil.ContextExecutor, related *WaWarehouse) error {
	var err error

	queries.SetScanner(&o.STFKWarehouseID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("st_fk_warehouse_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.STFKWarehouse = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.STFKWarehouseSTStocks {
		if queries.Equal(o.STFKWarehouseID, ri.STFKWarehouseID) {
			continue
		}

		ln := len(related.R.STFKWarehouseSTStocks)
		if ln > 1 && i < ln-1 {
			related.R.STFKWarehouseSTStocks[i] = related.R.STFKWarehouseSTStocks[ln-1]
		}
		related.R.STFKWarehouseSTStocks = related.R.STFKWarehouseSTStocks[:ln-1]
		break
	}
	return nil
}

// STStocks retrieves all the records using an executor.
func STStocks(mods ...qm.QueryMod) stStockQuery {
	mods = append(mods, qm.From("[products].[st_stock]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[products].[st_stock].*"})
	}

	return stStockQuery{q}
}

// FindSTStock retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSTStock(ctx context.Context, exec boil.ContextExecutor, sTID int, selectCols ...string) (*STStock, error) {
	stStockObj := &STStock{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [products].[st_stock] where [st_id]=$1", sel,
	)

	q := queries.Raw(query, sTID)

	err := q.Bind(ctx, exec, stStockObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from st_stock")
	}

	if err = stStockObj.doAfterSelectHooks(ctx, exec); err != nil {
		return stStockObj, err
	}

	return stStockObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *STStock) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no st_stock provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stStockColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	stStockInsertCacheMut.RLock()
	cache, cached := stStockInsertCache[key]
	stStockInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			stStockAllColumns,
			stStockColumnsWithDefault,
			stStockColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, stStockGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(stStockType, stStockMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(stStockType, stStockMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [products].[st_stock] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [products].[st_stock] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into st_stock")
	}

	if !cached {
		stStockInsertCacheMut.Lock()
		stStockInsertCache[key] = cache
		stStockInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the STStock.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *STStock) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	stStockUpdateCacheMut.RLock()
	cache, cached := stStockUpdateCache[key]
	stStockUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			stStockAllColumns,
			stStockPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, stStockGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update st_stock, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [products].[st_stock] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, stStockPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(stStockType, stStockMapping, append(wl, stStockPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update st_stock row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for st_stock")
	}

	if !cached {
		stStockUpdateCacheMut.Lock()
		stStockUpdateCache[key] = cache
		stStockUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q stStockQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for st_stock")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for st_stock")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o STStockSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stStockPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [products].[st_stock] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, stStockPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in stStock slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all stStock")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *STStock) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no st_stock provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stStockColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	stStockUpsertCacheMut.RLock()
	cache, cached := stStockUpsertCache[key]
	stStockUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			stStockAllColumns,
			stStockColumnsWithDefault,
			stStockColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, stStockGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(stStockPrimaryKeyColumns, v) && strmangle.ContainsAny(stStockColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert st_stock, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			stStockAllColumns,
			stStockPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, stStockGeneratedColumns)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert st_stock, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[products].[st_stock]", stStockPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(stStockPrimaryKeyColumns))
		copy(whitelist, stStockPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(stStockType, stStockMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(stStockType, stStockMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert st_stock")
	}

	if !cached {
		stStockUpsertCacheMut.Lock()
		stStockUpsertCache[key] = cache
		stStockUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single STStock record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *STStock) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no STStock provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), stStockPrimaryKeyMapping)
	sql := "DELETE FROM [products].[st_stock] WHERE [st_id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from st_stock")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for st_stock")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q stStockQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no stStockQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from st_stock")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for st_stock")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o STStockSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(stStockBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stStockPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [products].[st_stock] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, stStockPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from stStock slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for st_stock")
	}

	if len(stStockAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *STStock) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSTStock(ctx, exec, o.STID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *STStockSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := STStockSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stStockPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [products].[st_stock].* FROM [products].[st_stock] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, stStockPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in STStockSlice")
	}

	*o = slice

	return nil
}

// STStockExists checks if the STStock row exists.
func STStockExists(ctx context.Context, exec boil.ContextExecutor, sTID int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [products].[st_stock] where [st_id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, sTID)
	}
	row := exec.QueryRowContext(ctx, sql, sTID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if st_stock exists")
	}

	return exists, nil
}

// Exists checks if the STStock row exists.
func (o *STStock) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return STStockExists(ctx, exec, o.STID)
}
