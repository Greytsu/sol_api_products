// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/volatiletech/sqlboiler/v4/types"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OpOption is an object representing the database table.
type OpOption struct {
	OpID            int               `boil:"op_id" json:"op_id" toml:"op_id" yaml:"op_id"`
	OpCompanyID     int               `boil:"op_company_id" json:"op_company_id" toml:"op_company_id" yaml:"op_company_id"`
	OpName          string            `boil:"op_name" json:"op_name" toml:"op_name" yaml:"op_name"`
	OpStockTracking bool              `boil:"op_stock_tracking" json:"op_stock_tracking" toml:"op_stock_tracking" yaml:"op_stock_tracking"`
	OpPurchasePrice types.NullDecimal `boil:"op_purchase_price" json:"op_purchase_price,omitempty" toml:"op_purchase_price" yaml:"op_purchase_price,omitempty"`
	OpSellingPrice  types.NullDecimal `boil:"op_selling_price" json:"op_selling_price,omitempty" toml:"op_selling_price" yaml:"op_selling_price,omitempty"`
	OpCreateTime    time.Time         `boil:"op_create_time" json:"op_create_time" toml:"op_create_time" yaml:"op_create_time"`
	OpUpdateTime    time.Time         `boil:"op_update_time" json:"op_update_time" toml:"op_update_time" yaml:"op_update_time"`
	OpDeleted       null.Bool         `boil:"op_deleted" json:"op_deleted,omitempty" toml:"op_deleted" yaml:"op_deleted,omitempty"`
	OpFKProductID   int               `boil:"op_fk_product_id" json:"op_fk_product_id" toml:"op_fk_product_id" yaml:"op_fk_product_id"`

	R *opOptionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L opOptionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OpOptionColumns = struct {
	OpID            string
	OpCompanyID     string
	OpName          string
	OpStockTracking string
	OpPurchasePrice string
	OpSellingPrice  string
	OpCreateTime    string
	OpUpdateTime    string
	OpDeleted       string
	OpFKProductID   string
}{
	OpID:            "op_id",
	OpCompanyID:     "op_company_id",
	OpName:          "op_name",
	OpStockTracking: "op_stock_tracking",
	OpPurchasePrice: "op_purchase_price",
	OpSellingPrice:  "op_selling_price",
	OpCreateTime:    "op_create_time",
	OpUpdateTime:    "op_update_time",
	OpDeleted:       "op_deleted",
	OpFKProductID:   "op_fk_product_id",
}

var OpOptionTableColumns = struct {
	OpID            string
	OpCompanyID     string
	OpName          string
	OpStockTracking string
	OpPurchasePrice string
	OpSellingPrice  string
	OpCreateTime    string
	OpUpdateTime    string
	OpDeleted       string
	OpFKProductID   string
}{
	OpID:            "op_option.op_id",
	OpCompanyID:     "op_option.op_company_id",
	OpName:          "op_option.op_name",
	OpStockTracking: "op_option.op_stock_tracking",
	OpPurchasePrice: "op_option.op_purchase_price",
	OpSellingPrice:  "op_option.op_selling_price",
	OpCreateTime:    "op_option.op_create_time",
	OpUpdateTime:    "op_option.op_update_time",
	OpDeleted:       "op_option.op_deleted",
	OpFKProductID:   "op_option.op_fk_product_id",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var OpOptionWhere = struct {
	OpID            whereHelperint
	OpCompanyID     whereHelperint
	OpName          whereHelperstring
	OpStockTracking whereHelperbool
	OpPurchasePrice whereHelpertypes_NullDecimal
	OpSellingPrice  whereHelpertypes_NullDecimal
	OpCreateTime    whereHelpertime_Time
	OpUpdateTime    whereHelpertime_Time
	OpDeleted       whereHelpernull_Bool
	OpFKProductID   whereHelperint
}{
	OpID:            whereHelperint{field: "[products].[op_option].[op_id]"},
	OpCompanyID:     whereHelperint{field: "[products].[op_option].[op_company_id]"},
	OpName:          whereHelperstring{field: "[products].[op_option].[op_name]"},
	OpStockTracking: whereHelperbool{field: "[products].[op_option].[op_stock_tracking]"},
	OpPurchasePrice: whereHelpertypes_NullDecimal{field: "[products].[op_option].[op_purchase_price]"},
	OpSellingPrice:  whereHelpertypes_NullDecimal{field: "[products].[op_option].[op_selling_price]"},
	OpCreateTime:    whereHelpertime_Time{field: "[products].[op_option].[op_create_time]"},
	OpUpdateTime:    whereHelpertime_Time{field: "[products].[op_option].[op_update_time]"},
	OpDeleted:       whereHelpernull_Bool{field: "[products].[op_option].[op_deleted]"},
	OpFKProductID:   whereHelperint{field: "[products].[op_option].[op_fk_product_id]"},
}

// OpOptionRels is where relationship names are stored.
var OpOptionRels = struct {
	OpFKProduct                string
	BeFKOptionBeBundleElements string
	STFKOptionSTStocks         string
}{
	OpFKProduct:                "OpFKProduct",
	BeFKOptionBeBundleElements: "BeFKOptionBeBundleElements",
	STFKOptionSTStocks:         "STFKOptionSTStocks",
}

// opOptionR is where relationships are stored.
type opOptionR struct {
	OpFKProduct                *PRProduct           `boil:"OpFKProduct" json:"OpFKProduct" toml:"OpFKProduct" yaml:"OpFKProduct"`
	BeFKOptionBeBundleElements BeBundleElementSlice `boil:"BeFKOptionBeBundleElements" json:"BeFKOptionBeBundleElements" toml:"BeFKOptionBeBundleElements" yaml:"BeFKOptionBeBundleElements"`
	STFKOptionSTStocks         STStockSlice         `boil:"STFKOptionSTStocks" json:"STFKOptionSTStocks" toml:"STFKOptionSTStocks" yaml:"STFKOptionSTStocks"`
}

// NewStruct creates a new relationship struct
func (*opOptionR) NewStruct() *opOptionR {
	return &opOptionR{}
}

func (r *opOptionR) GetOpFKProduct() *PRProduct {
	if r == nil {
		return nil
	}
	return r.OpFKProduct
}

func (r *opOptionR) GetBeFKOptionBeBundleElements() BeBundleElementSlice {
	if r == nil {
		return nil
	}
	return r.BeFKOptionBeBundleElements
}

func (r *opOptionR) GetSTFKOptionSTStocks() STStockSlice {
	if r == nil {
		return nil
	}
	return r.STFKOptionSTStocks
}

// opOptionL is where Load methods for each relationship are stored.
type opOptionL struct{}

var (
	opOptionAllColumns            = []string{"op_id", "op_company_id", "op_name", "op_stock_tracking", "op_purchase_price", "op_selling_price", "op_create_time", "op_update_time", "op_deleted", "op_fk_product_id"}
	opOptionColumnsWithoutDefault = []string{"op_company_id", "op_name", "op_stock_tracking", "op_purchase_price", "op_selling_price", "op_fk_product_id"}
	opOptionColumnsWithDefault    = []string{"op_id", "op_create_time", "op_update_time", "op_deleted"}
	opOptionPrimaryKeyColumns     = []string{"op_id"}
	opOptionGeneratedColumns      = []string{"op_id"}
)

type (
	// OpOptionSlice is an alias for a slice of pointers to OpOption.
	// This should almost always be used instead of []OpOption.
	OpOptionSlice []*OpOption
	// OpOptionHook is the signature for custom OpOption hook methods
	OpOptionHook func(context.Context, boil.ContextExecutor, *OpOption) error

	opOptionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	opOptionType                 = reflect.TypeOf(&OpOption{})
	opOptionMapping              = queries.MakeStructMapping(opOptionType)
	opOptionPrimaryKeyMapping, _ = queries.BindMapping(opOptionType, opOptionMapping, opOptionPrimaryKeyColumns)
	opOptionInsertCacheMut       sync.RWMutex
	opOptionInsertCache          = make(map[string]insertCache)
	opOptionUpdateCacheMut       sync.RWMutex
	opOptionUpdateCache          = make(map[string]updateCache)
	opOptionUpsertCacheMut       sync.RWMutex
	opOptionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var opOptionAfterSelectHooks []OpOptionHook

var opOptionBeforeInsertHooks []OpOptionHook
var opOptionAfterInsertHooks []OpOptionHook

var opOptionBeforeUpdateHooks []OpOptionHook
var opOptionAfterUpdateHooks []OpOptionHook

var opOptionBeforeDeleteHooks []OpOptionHook
var opOptionAfterDeleteHooks []OpOptionHook

var opOptionBeforeUpsertHooks []OpOptionHook
var opOptionAfterUpsertHooks []OpOptionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OpOption) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range opOptionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OpOption) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range opOptionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OpOption) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range opOptionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OpOption) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range opOptionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OpOption) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range opOptionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OpOption) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range opOptionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OpOption) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range opOptionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OpOption) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range opOptionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OpOption) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range opOptionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOpOptionHook registers your hook function for all future operations.
func AddOpOptionHook(hookPoint boil.HookPoint, opOptionHook OpOptionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		opOptionAfterSelectHooks = append(opOptionAfterSelectHooks, opOptionHook)
	case boil.BeforeInsertHook:
		opOptionBeforeInsertHooks = append(opOptionBeforeInsertHooks, opOptionHook)
	case boil.AfterInsertHook:
		opOptionAfterInsertHooks = append(opOptionAfterInsertHooks, opOptionHook)
	case boil.BeforeUpdateHook:
		opOptionBeforeUpdateHooks = append(opOptionBeforeUpdateHooks, opOptionHook)
	case boil.AfterUpdateHook:
		opOptionAfterUpdateHooks = append(opOptionAfterUpdateHooks, opOptionHook)
	case boil.BeforeDeleteHook:
		opOptionBeforeDeleteHooks = append(opOptionBeforeDeleteHooks, opOptionHook)
	case boil.AfterDeleteHook:
		opOptionAfterDeleteHooks = append(opOptionAfterDeleteHooks, opOptionHook)
	case boil.BeforeUpsertHook:
		opOptionBeforeUpsertHooks = append(opOptionBeforeUpsertHooks, opOptionHook)
	case boil.AfterUpsertHook:
		opOptionAfterUpsertHooks = append(opOptionAfterUpsertHooks, opOptionHook)
	}
}

// One returns a single opOption record from the query.
func (q opOptionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OpOption, error) {
	o := &OpOption{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for op_option")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OpOption records from the query.
func (q opOptionQuery) All(ctx context.Context, exec boil.ContextExecutor) (OpOptionSlice, error) {
	var o []*OpOption

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OpOption slice")
	}

	if len(opOptionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OpOption records in the query.
func (q opOptionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count op_option rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q opOptionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if op_option exists")
	}

	return count > 0, nil
}

// OpFKProduct pointed to by the foreign key.
func (o *OpOption) OpFKProduct(mods ...qm.QueryMod) prProductQuery {
	queryMods := []qm.QueryMod{
		qm.Where("[pr_id] = ?", o.OpFKProductID),
	}

	queryMods = append(queryMods, mods...)

	return PRProducts(queryMods...)
}

// BeFKOptionBeBundleElements retrieves all the be_bundle_element's BeBundleElements with an executor via be_fk_option_id column.
func (o *OpOption) BeFKOptionBeBundleElements(mods ...qm.QueryMod) beBundleElementQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("[products].[be_bundle_element].[be_fk_option_id]=?", o.OpID),
	)

	return BeBundleElements(queryMods...)
}

// STFKOptionSTStocks retrieves all the st_stock's STStocks with an executor via st_fk_option_id column.
func (o *OpOption) STFKOptionSTStocks(mods ...qm.QueryMod) stStockQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("[products].[st_stock].[st_fk_option_id]=?", o.OpID),
	)

	return STStocks(queryMods...)
}

// LoadOpFKProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (opOptionL) LoadOpFKProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOpOption interface{}, mods queries.Applicator) error {
	var slice []*OpOption
	var object *OpOption

	if singular {
		var ok bool
		object, ok = maybeOpOption.(*OpOption)
		if !ok {
			object = new(OpOption)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOpOption)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOpOption))
			}
		}
	} else {
		s, ok := maybeOpOption.(*[]*OpOption)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOpOption)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOpOption))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &opOptionR{}
		}
		args = append(args, object.OpFKProductID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &opOptionR{}
			}

			for _, a := range args {
				if a == obj.OpFKProductID {
					continue Outer
				}
			}

			args = append(args, obj.OpFKProductID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products.pr_product`),
		qm.WhereIn(`products.pr_product.pr_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PRProduct")
	}

	var resultSlice []*PRProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PRProduct")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pr_product")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pr_product")
	}

	if len(prProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OpFKProduct = foreign
		if foreign.R == nil {
			foreign.R = &prProductR{}
		}
		foreign.R.OpFKProductOpOptions = append(foreign.R.OpFKProductOpOptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OpFKProductID == foreign.PRID {
				local.R.OpFKProduct = foreign
				if foreign.R == nil {
					foreign.R = &prProductR{}
				}
				foreign.R.OpFKProductOpOptions = append(foreign.R.OpFKProductOpOptions, local)
				break
			}
		}
	}

	return nil
}

// LoadBeFKOptionBeBundleElements allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (opOptionL) LoadBeFKOptionBeBundleElements(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOpOption interface{}, mods queries.Applicator) error {
	var slice []*OpOption
	var object *OpOption

	if singular {
		var ok bool
		object, ok = maybeOpOption.(*OpOption)
		if !ok {
			object = new(OpOption)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOpOption)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOpOption))
			}
		}
	} else {
		s, ok := maybeOpOption.(*[]*OpOption)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOpOption)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOpOption))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &opOptionR{}
		}
		args = append(args, object.OpID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &opOptionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OpID) {
					continue Outer
				}
			}

			args = append(args, obj.OpID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products.be_bundle_element`),
		qm.WhereIn(`products.be_bundle_element.be_fk_option_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load be_bundle_element")
	}

	var resultSlice []*BeBundleElement
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice be_bundle_element")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on be_bundle_element")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for be_bundle_element")
	}

	if len(beBundleElementAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BeFKOptionBeBundleElements = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &beBundleElementR{}
			}
			foreign.R.BeFKOption = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.OpID, foreign.BeFKOptionID) {
				local.R.BeFKOptionBeBundleElements = append(local.R.BeFKOptionBeBundleElements, foreign)
				if foreign.R == nil {
					foreign.R = &beBundleElementR{}
				}
				foreign.R.BeFKOption = local
				break
			}
		}
	}

	return nil
}

// LoadSTFKOptionSTStocks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (opOptionL) LoadSTFKOptionSTStocks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOpOption interface{}, mods queries.Applicator) error {
	var slice []*OpOption
	var object *OpOption

	if singular {
		var ok bool
		object, ok = maybeOpOption.(*OpOption)
		if !ok {
			object = new(OpOption)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOpOption)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOpOption))
			}
		}
	} else {
		s, ok := maybeOpOption.(*[]*OpOption)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOpOption)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOpOption))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &opOptionR{}
		}
		args = append(args, object.OpID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &opOptionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OpID) {
					continue Outer
				}
			}

			args = append(args, obj.OpID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products.st_stock`),
		qm.WhereIn(`products.st_stock.st_fk_option_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load st_stock")
	}

	var resultSlice []*STStock
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice st_stock")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on st_stock")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for st_stock")
	}

	if len(stStockAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.STFKOptionSTStocks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &stStockR{}
			}
			foreign.R.STFKOption = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.OpID, foreign.STFKOptionID) {
				local.R.STFKOptionSTStocks = append(local.R.STFKOptionSTStocks, foreign)
				if foreign.R == nil {
					foreign.R = &stStockR{}
				}
				foreign.R.STFKOption = local
				break
			}
		}
	}

	return nil
}

// SetOpFKProduct of the opOption to the related item.
// Sets o.R.OpFKProduct to related.
// Adds o to related.R.OpFKProductOpOptions.
func (o *OpOption) SetOpFKProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PRProduct) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE [products].[op_option] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, []string{"op_fk_product_id"}),
		strmangle.WhereClause("[", "]", 2, opOptionPrimaryKeyColumns),
	)
	values := []interface{}{related.PRID, o.OpID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OpFKProductID = related.PRID
	if o.R == nil {
		o.R = &opOptionR{
			OpFKProduct: related,
		}
	} else {
		o.R.OpFKProduct = related
	}

	if related.R == nil {
		related.R = &prProductR{
			OpFKProductOpOptions: OpOptionSlice{o},
		}
	} else {
		related.R.OpFKProductOpOptions = append(related.R.OpFKProductOpOptions, o)
	}

	return nil
}

// AddBeFKOptionBeBundleElements adds the given related objects to the existing relationships
// of the op_option, optionally inserting them as new records.
// Appends related to o.R.BeFKOptionBeBundleElements.
// Sets related.R.BeFKOption appropriately.
func (o *OpOption) AddBeFKOptionBeBundleElements(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BeBundleElement) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BeFKOptionID, o.OpID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE [products].[be_bundle_element] SET %s WHERE %s",
				strmangle.SetParamNames("[", "]", 1, []string{"be_fk_option_id"}),
				strmangle.WhereClause("[", "]", 2, beBundleElementPrimaryKeyColumns),
			)
			values := []interface{}{o.OpID, rel.BeID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BeFKOptionID, o.OpID)
		}
	}

	if o.R == nil {
		o.R = &opOptionR{
			BeFKOptionBeBundleElements: related,
		}
	} else {
		o.R.BeFKOptionBeBundleElements = append(o.R.BeFKOptionBeBundleElements, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &beBundleElementR{
				BeFKOption: o,
			}
		} else {
			rel.R.BeFKOption = o
		}
	}
	return nil
}

// SetBeFKOptionBeBundleElements removes all previously related items of the
// op_option replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BeFKOption's BeFKOptionBeBundleElements accordingly.
// Replaces o.R.BeFKOptionBeBundleElements with related.
// Sets related.R.BeFKOption's BeFKOptionBeBundleElements accordingly.
func (o *OpOption) SetBeFKOptionBeBundleElements(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BeBundleElement) error {
	query := "update [products].[be_bundle_element] set [be_fk_option_id] = null where [be_fk_option_id] = $1"
	values := []interface{}{o.OpID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BeFKOptionBeBundleElements {
			queries.SetScanner(&rel.BeFKOptionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.BeFKOption = nil
		}
		o.R.BeFKOptionBeBundleElements = nil
	}

	return o.AddBeFKOptionBeBundleElements(ctx, exec, insert, related...)
}

// RemoveBeFKOptionBeBundleElements relationships from objects passed in.
// Removes related items from R.BeFKOptionBeBundleElements (uses pointer comparison, removal does not keep order)
// Sets related.R.BeFKOption.
func (o *OpOption) RemoveBeFKOptionBeBundleElements(ctx context.Context, exec boil.ContextExecutor, related ...*BeBundleElement) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BeFKOptionID, nil)
		if rel.R != nil {
			rel.R.BeFKOption = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("be_fk_option_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BeFKOptionBeBundleElements {
			if rel != ri {
				continue
			}

			ln := len(o.R.BeFKOptionBeBundleElements)
			if ln > 1 && i < ln-1 {
				o.R.BeFKOptionBeBundleElements[i] = o.R.BeFKOptionBeBundleElements[ln-1]
			}
			o.R.BeFKOptionBeBundleElements = o.R.BeFKOptionBeBundleElements[:ln-1]
			break
		}
	}

	return nil
}

// AddSTFKOptionSTStocks adds the given related objects to the existing relationships
// of the op_option, optionally inserting them as new records.
// Appends related to o.R.STFKOptionSTStocks.
// Sets related.R.STFKOption appropriately.
func (o *OpOption) AddSTFKOptionSTStocks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*STStock) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.STFKOptionID, o.OpID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE [products].[st_stock] SET %s WHERE %s",
				strmangle.SetParamNames("[", "]", 1, []string{"st_fk_option_id"}),
				strmangle.WhereClause("[", "]", 2, stStockPrimaryKeyColumns),
			)
			values := []interface{}{o.OpID, rel.STID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.STFKOptionID, o.OpID)
		}
	}

	if o.R == nil {
		o.R = &opOptionR{
			STFKOptionSTStocks: related,
		}
	} else {
		o.R.STFKOptionSTStocks = append(o.R.STFKOptionSTStocks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &stStockR{
				STFKOption: o,
			}
		} else {
			rel.R.STFKOption = o
		}
	}
	return nil
}

// SetSTFKOptionSTStocks removes all previously related items of the
// op_option replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.STFKOption's STFKOptionSTStocks accordingly.
// Replaces o.R.STFKOptionSTStocks with related.
// Sets related.R.STFKOption's STFKOptionSTStocks accordingly.
func (o *OpOption) SetSTFKOptionSTStocks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*STStock) error {
	query := "update [products].[st_stock] set [st_fk_option_id] = null where [st_fk_option_id] = $1"
	values := []interface{}{o.OpID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.STFKOptionSTStocks {
			queries.SetScanner(&rel.STFKOptionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.STFKOption = nil
		}
		o.R.STFKOptionSTStocks = nil
	}

	return o.AddSTFKOptionSTStocks(ctx, exec, insert, related...)
}

// RemoveSTFKOptionSTStocks relationships from objects passed in.
// Removes related items from R.STFKOptionSTStocks (uses pointer comparison, removal does not keep order)
// Sets related.R.STFKOption.
func (o *OpOption) RemoveSTFKOptionSTStocks(ctx context.Context, exec boil.ContextExecutor, related ...*STStock) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.STFKOptionID, nil)
		if rel.R != nil {
			rel.R.STFKOption = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("st_fk_option_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.STFKOptionSTStocks {
			if rel != ri {
				continue
			}

			ln := len(o.R.STFKOptionSTStocks)
			if ln > 1 && i < ln-1 {
				o.R.STFKOptionSTStocks[i] = o.R.STFKOptionSTStocks[ln-1]
			}
			o.R.STFKOptionSTStocks = o.R.STFKOptionSTStocks[:ln-1]
			break
		}
	}

	return nil
}

// OpOptions retrieves all the records using an executor.
func OpOptions(mods ...qm.QueryMod) opOptionQuery {
	mods = append(mods, qm.From("[products].[op_option]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[products].[op_option].*"})
	}

	return opOptionQuery{q}
}

// FindOpOption retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOpOption(ctx context.Context, exec boil.ContextExecutor, opID int, selectCols ...string) (*OpOption, error) {
	opOptionObj := &OpOption{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [products].[op_option] where [op_id]=$1", sel,
	)

	q := queries.Raw(query, opID)

	err := q.Bind(ctx, exec, opOptionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from op_option")
	}

	if err = opOptionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return opOptionObj, err
	}

	return opOptionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OpOption) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no op_option provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(opOptionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	opOptionInsertCacheMut.RLock()
	cache, cached := opOptionInsertCache[key]
	opOptionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			opOptionAllColumns,
			opOptionColumnsWithDefault,
			opOptionColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, opOptionGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(opOptionType, opOptionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(opOptionType, opOptionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [products].[op_option] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [products].[op_option] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into op_option")
	}

	if !cached {
		opOptionInsertCacheMut.Lock()
		opOptionInsertCache[key] = cache
		opOptionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OpOption.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OpOption) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	opOptionUpdateCacheMut.RLock()
	cache, cached := opOptionUpdateCache[key]
	opOptionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			opOptionAllColumns,
			opOptionPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, opOptionGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update op_option, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [products].[op_option] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, opOptionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(opOptionType, opOptionMapping, append(wl, opOptionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update op_option row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for op_option")
	}

	if !cached {
		opOptionUpdateCacheMut.Lock()
		opOptionUpdateCache[key] = cache
		opOptionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q opOptionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for op_option")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for op_option")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OpOptionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), opOptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [products].[op_option] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, opOptionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in opOption slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all opOption")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *OpOption) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no op_option provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(opOptionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	opOptionUpsertCacheMut.RLock()
	cache, cached := opOptionUpsertCache[key]
	opOptionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			opOptionAllColumns,
			opOptionColumnsWithDefault,
			opOptionColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, opOptionGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(opOptionPrimaryKeyColumns, v) && strmangle.ContainsAny(opOptionColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert op_option, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			opOptionAllColumns,
			opOptionPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, opOptionGeneratedColumns)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert op_option, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[products].[op_option]", opOptionPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(opOptionPrimaryKeyColumns))
		copy(whitelist, opOptionPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(opOptionType, opOptionMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(opOptionType, opOptionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert op_option")
	}

	if !cached {
		opOptionUpsertCacheMut.Lock()
		opOptionUpsertCache[key] = cache
		opOptionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OpOption record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OpOption) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OpOption provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), opOptionPrimaryKeyMapping)
	sql := "DELETE FROM [products].[op_option] WHERE [op_id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from op_option")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for op_option")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q opOptionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no opOptionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from op_option")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for op_option")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OpOptionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(opOptionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), opOptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [products].[op_option] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, opOptionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from opOption slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for op_option")
	}

	if len(opOptionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OpOption) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOpOption(ctx, exec, o.OpID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OpOptionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OpOptionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), opOptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [products].[op_option].* FROM [products].[op_option] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, opOptionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OpOptionSlice")
	}

	*o = slice

	return nil
}

// OpOptionExists checks if the OpOption row exists.
func OpOptionExists(ctx context.Context, exec boil.ContextExecutor, opID int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [products].[op_option] where [op_id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, opID)
	}
	row := exec.QueryRowContext(ctx, sql, opID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if op_option exists")
	}

	return exists, nil
}

// Exists checks if the OpOption row exists.
func (o *OpOption) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OpOptionExists(ctx, exec, o.OpID)
}
