// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Variant is an object representing the database table.
type Variant struct {
	ID            int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CompanyID     int       `boil:"company_id" json:"company_id" toml:"company_id" yaml:"company_id"`
	Name          string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	StockTracking bool      `boil:"stock_tracking" json:"stock_tracking" toml:"stock_tracking" yaml:"stock_tracking"`
	PurchasePrice float64   `boil:"purchase_price" json:"purchase_price" toml:"purchase_price" yaml:"purchase_price"`
	SellingPrice  float64   `boil:"selling_price" json:"selling_price" toml:"selling_price" yaml:"selling_price"`
	CreateTime    time.Time `boil:"create_time" json:"create_time" toml:"create_time" yaml:"create_time"`
	UpdateTime    time.Time `boil:"update_time" json:"update_time" toml:"update_time" yaml:"update_time"`
	Deleted       null.Bool `boil:"deleted" json:"deleted,omitempty" toml:"deleted" yaml:"deleted,omitempty"`
	FKProductID   int       `boil:"fk_product_id" json:"fk_product_id" toml:"fk_product_id" yaml:"fk_product_id"`

	R *variantR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L variantL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VariantColumns = struct {
	ID            string
	CompanyID     string
	Name          string
	StockTracking string
	PurchasePrice string
	SellingPrice  string
	CreateTime    string
	UpdateTime    string
	Deleted       string
	FKProductID   string
}{
	ID:            "id",
	CompanyID:     "company_id",
	Name:          "name",
	StockTracking: "stock_tracking",
	PurchasePrice: "purchase_price",
	SellingPrice:  "selling_price",
	CreateTime:    "create_time",
	UpdateTime:    "update_time",
	Deleted:       "deleted",
	FKProductID:   "fk_product_id",
}

var VariantTableColumns = struct {
	ID            string
	CompanyID     string
	Name          string
	StockTracking string
	PurchasePrice string
	SellingPrice  string
	CreateTime    string
	UpdateTime    string
	Deleted       string
	FKProductID   string
}{
	ID:            "variant.id",
	CompanyID:     "variant.company_id",
	Name:          "variant.name",
	StockTracking: "variant.stock_tracking",
	PurchasePrice: "variant.purchase_price",
	SellingPrice:  "variant.selling_price",
	CreateTime:    "variant.create_time",
	UpdateTime:    "variant.update_time",
	Deleted:       "variant.deleted",
	FKProductID:   "variant.fk_product_id",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var VariantWhere = struct {
	ID            whereHelperint
	CompanyID     whereHelperint
	Name          whereHelperstring
	StockTracking whereHelperbool
	PurchasePrice whereHelperfloat64
	SellingPrice  whereHelperfloat64
	CreateTime    whereHelpertime_Time
	UpdateTime    whereHelpertime_Time
	Deleted       whereHelpernull_Bool
	FKProductID   whereHelperint
}{
	ID:            whereHelperint{field: "[products].[variant].[id]"},
	CompanyID:     whereHelperint{field: "[products].[variant].[company_id]"},
	Name:          whereHelperstring{field: "[products].[variant].[name]"},
	StockTracking: whereHelperbool{field: "[products].[variant].[stock_tracking]"},
	PurchasePrice: whereHelperfloat64{field: "[products].[variant].[purchase_price]"},
	SellingPrice:  whereHelperfloat64{field: "[products].[variant].[selling_price]"},
	CreateTime:    whereHelpertime_Time{field: "[products].[variant].[create_time]"},
	UpdateTime:    whereHelpertime_Time{field: "[products].[variant].[update_time]"},
	Deleted:       whereHelpernull_Bool{field: "[products].[variant].[deleted]"},
	FKProductID:   whereHelperint{field: "[products].[variant].[fk_product_id]"},
}

// VariantRels is where relationship names are stored.
var VariantRels = struct {
	FKProduct               string
	FKVariantBundleElements string
	FKVariantStocks         string
}{
	FKProduct:               "FKProduct",
	FKVariantBundleElements: "FKVariantBundleElements",
	FKVariantStocks:         "FKVariantStocks",
}

// variantR is where relationships are stored.
type variantR struct {
	FKProduct               *Product           `boil:"FKProduct" json:"FKProduct" toml:"FKProduct" yaml:"FKProduct"`
	FKVariantBundleElements BundleElementSlice `boil:"FKVariantBundleElements" json:"FKVariantBundleElements" toml:"FKVariantBundleElements" yaml:"FKVariantBundleElements"`
	FKVariantStocks         StockSlice         `boil:"FKVariantStocks" json:"FKVariantStocks" toml:"FKVariantStocks" yaml:"FKVariantStocks"`
}

// NewStruct creates a new relationship struct
func (*variantR) NewStruct() *variantR {
	return &variantR{}
}

func (r *variantR) GetFKProduct() *Product {
	if r == nil {
		return nil
	}
	return r.FKProduct
}

func (r *variantR) GetFKVariantBundleElements() BundleElementSlice {
	if r == nil {
		return nil
	}
	return r.FKVariantBundleElements
}

func (r *variantR) GetFKVariantStocks() StockSlice {
	if r == nil {
		return nil
	}
	return r.FKVariantStocks
}

// variantL is where Load methods for each relationship are stored.
type variantL struct{}

var (
	variantAllColumns            = []string{"id", "company_id", "name", "stock_tracking", "purchase_price", "selling_price", "create_time", "update_time", "deleted", "fk_product_id"}
	variantColumnsWithoutDefault = []string{"company_id", "name", "stock_tracking", "purchase_price", "selling_price", "fk_product_id"}
	variantColumnsWithDefault    = []string{"id", "create_time", "update_time", "deleted"}
	variantPrimaryKeyColumns     = []string{"id"}
	variantGeneratedColumns      = []string{"id"}
)

type (
	// VariantSlice is an alias for a slice of pointers to Variant.
	// This should almost always be used instead of []Variant.
	VariantSlice []*Variant
	// VariantHook is the signature for custom Variant hook methods
	VariantHook func(context.Context, boil.ContextExecutor, *Variant) error

	variantQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	variantType                 = reflect.TypeOf(&Variant{})
	variantMapping              = queries.MakeStructMapping(variantType)
	variantPrimaryKeyMapping, _ = queries.BindMapping(variantType, variantMapping, variantPrimaryKeyColumns)
	variantInsertCacheMut       sync.RWMutex
	variantInsertCache          = make(map[string]insertCache)
	variantUpdateCacheMut       sync.RWMutex
	variantUpdateCache          = make(map[string]updateCache)
	variantUpsertCacheMut       sync.RWMutex
	variantUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var variantAfterSelectHooks []VariantHook

var variantBeforeInsertHooks []VariantHook
var variantAfterInsertHooks []VariantHook

var variantBeforeUpdateHooks []VariantHook
var variantAfterUpdateHooks []VariantHook

var variantBeforeDeleteHooks []VariantHook
var variantAfterDeleteHooks []VariantHook

var variantBeforeUpsertHooks []VariantHook
var variantAfterUpsertHooks []VariantHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Variant) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range variantAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Variant) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range variantBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Variant) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range variantAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Variant) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range variantBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Variant) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range variantAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Variant) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range variantBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Variant) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range variantAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Variant) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range variantBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Variant) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range variantAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVariantHook registers your hook function for all future operations.
func AddVariantHook(hookPoint boil.HookPoint, variantHook VariantHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		variantAfterSelectHooks = append(variantAfterSelectHooks, variantHook)
	case boil.BeforeInsertHook:
		variantBeforeInsertHooks = append(variantBeforeInsertHooks, variantHook)
	case boil.AfterInsertHook:
		variantAfterInsertHooks = append(variantAfterInsertHooks, variantHook)
	case boil.BeforeUpdateHook:
		variantBeforeUpdateHooks = append(variantBeforeUpdateHooks, variantHook)
	case boil.AfterUpdateHook:
		variantAfterUpdateHooks = append(variantAfterUpdateHooks, variantHook)
	case boil.BeforeDeleteHook:
		variantBeforeDeleteHooks = append(variantBeforeDeleteHooks, variantHook)
	case boil.AfterDeleteHook:
		variantAfterDeleteHooks = append(variantAfterDeleteHooks, variantHook)
	case boil.BeforeUpsertHook:
		variantBeforeUpsertHooks = append(variantBeforeUpsertHooks, variantHook)
	case boil.AfterUpsertHook:
		variantAfterUpsertHooks = append(variantAfterUpsertHooks, variantHook)
	}
}

// One returns a single variant record from the query.
func (q variantQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Variant, error) {
	o := &Variant{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for variant")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Variant records from the query.
func (q variantQuery) All(ctx context.Context, exec boil.ContextExecutor) (VariantSlice, error) {
	var o []*Variant

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Variant slice")
	}

	if len(variantAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Variant records in the query.
func (q variantQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count variant rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q variantQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if variant exists")
	}

	return count > 0, nil
}

// FKProduct pointed to by the foreign key.
func (o *Variant) FKProduct(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("[id] = ?", o.FKProductID),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// FKVariantBundleElements retrieves all the bundle_element's BundleElements with an executor via fk_variant_id column.
func (o *Variant) FKVariantBundleElements(mods ...qm.QueryMod) bundleElementQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("[products].[bundle_element].[fk_variant_id]=?", o.ID),
	)

	return BundleElements(queryMods...)
}

// FKVariantStocks retrieves all the stock's Stocks with an executor via fk_variant_id column.
func (o *Variant) FKVariantStocks(mods ...qm.QueryMod) stockQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("[products].[stock].[fk_variant_id]=?", o.ID),
	)

	return Stocks(queryMods...)
}

// LoadFKProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (variantL) LoadFKProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVariant interface{}, mods queries.Applicator) error {
	var slice []*Variant
	var object *Variant

	if singular {
		var ok bool
		object, ok = maybeVariant.(*Variant)
		if !ok {
			object = new(Variant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVariant))
			}
		}
	} else {
		s, ok := maybeVariant.(*[]*Variant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVariant))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &variantR{}
		}
		args = append(args, object.FKProductID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &variantR{}
			}

			for _, a := range args {
				if a == obj.FKProductID {
					continue Outer
				}
			}

			args = append(args, obj.FKProductID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products.product`),
		qm.WhereIn(`products.product.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FKProduct = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.FKProductVariants = append(foreign.R.FKProductVariants, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FKProductID == foreign.ID {
				local.R.FKProduct = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.FKProductVariants = append(foreign.R.FKProductVariants, local)
				break
			}
		}
	}

	return nil
}

// LoadFKVariantBundleElements allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (variantL) LoadFKVariantBundleElements(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVariant interface{}, mods queries.Applicator) error {
	var slice []*Variant
	var object *Variant

	if singular {
		var ok bool
		object, ok = maybeVariant.(*Variant)
		if !ok {
			object = new(Variant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVariant))
			}
		}
	} else {
		s, ok := maybeVariant.(*[]*Variant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVariant))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &variantR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &variantR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products.bundle_element`),
		qm.WhereIn(`products.bundle_element.fk_variant_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bundle_element")
	}

	var resultSlice []*BundleElement
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bundle_element")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on bundle_element")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bundle_element")
	}

	if len(bundleElementAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FKVariantBundleElements = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bundleElementR{}
			}
			foreign.R.FKVariant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.FKVariantID) {
				local.R.FKVariantBundleElements = append(local.R.FKVariantBundleElements, foreign)
				if foreign.R == nil {
					foreign.R = &bundleElementR{}
				}
				foreign.R.FKVariant = local
				break
			}
		}
	}

	return nil
}

// LoadFKVariantStocks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (variantL) LoadFKVariantStocks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVariant interface{}, mods queries.Applicator) error {
	var slice []*Variant
	var object *Variant

	if singular {
		var ok bool
		object, ok = maybeVariant.(*Variant)
		if !ok {
			object = new(Variant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVariant))
			}
		}
	} else {
		s, ok := maybeVariant.(*[]*Variant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVariant))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &variantR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &variantR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products.stock`),
		qm.WhereIn(`products.stock.fk_variant_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load stock")
	}

	var resultSlice []*Stock
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice stock")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on stock")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stock")
	}

	if len(stockAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FKVariantStocks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &stockR{}
			}
			foreign.R.FKVariant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.FKVariantID) {
				local.R.FKVariantStocks = append(local.R.FKVariantStocks, foreign)
				if foreign.R == nil {
					foreign.R = &stockR{}
				}
				foreign.R.FKVariant = local
				break
			}
		}
	}

	return nil
}

// SetFKProduct of the variant to the related item.
// Sets o.R.FKProduct to related.
// Adds o to related.R.FKProductVariants.
func (o *Variant) SetFKProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE [products].[variant] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, []string{"fk_product_id"}),
		strmangle.WhereClause("[", "]", 2, variantPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FKProductID = related.ID
	if o.R == nil {
		o.R = &variantR{
			FKProduct: related,
		}
	} else {
		o.R.FKProduct = related
	}

	if related.R == nil {
		related.R = &productR{
			FKProductVariants: VariantSlice{o},
		}
	} else {
		related.R.FKProductVariants = append(related.R.FKProductVariants, o)
	}

	return nil
}

// AddFKVariantBundleElements adds the given related objects to the existing relationships
// of the variant, optionally inserting them as new records.
// Appends related to o.R.FKVariantBundleElements.
// Sets related.R.FKVariant appropriately.
func (o *Variant) AddFKVariantBundleElements(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BundleElement) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.FKVariantID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE [products].[bundle_element] SET %s WHERE %s",
				strmangle.SetParamNames("[", "]", 1, []string{"fk_variant_id"}),
				strmangle.WhereClause("[", "]", 2, bundleElementPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.FKVariantID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &variantR{
			FKVariantBundleElements: related,
		}
	} else {
		o.R.FKVariantBundleElements = append(o.R.FKVariantBundleElements, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bundleElementR{
				FKVariant: o,
			}
		} else {
			rel.R.FKVariant = o
		}
	}
	return nil
}

// SetFKVariantBundleElements removes all previously related items of the
// variant replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.FKVariant's FKVariantBundleElements accordingly.
// Replaces o.R.FKVariantBundleElements with related.
// Sets related.R.FKVariant's FKVariantBundleElements accordingly.
func (o *Variant) SetFKVariantBundleElements(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BundleElement) error {
	query := "update [products].[bundle_element] set [fk_variant_id] = null where [fk_variant_id] = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.FKVariantBundleElements {
			queries.SetScanner(&rel.FKVariantID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.FKVariant = nil
		}
		o.R.FKVariantBundleElements = nil
	}

	return o.AddFKVariantBundleElements(ctx, exec, insert, related...)
}

// RemoveFKVariantBundleElements relationships from objects passed in.
// Removes related items from R.FKVariantBundleElements (uses pointer comparison, removal does not keep order)
// Sets related.R.FKVariant.
func (o *Variant) RemoveFKVariantBundleElements(ctx context.Context, exec boil.ContextExecutor, related ...*BundleElement) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.FKVariantID, nil)
		if rel.R != nil {
			rel.R.FKVariant = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("fk_variant_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.FKVariantBundleElements {
			if rel != ri {
				continue
			}

			ln := len(o.R.FKVariantBundleElements)
			if ln > 1 && i < ln-1 {
				o.R.FKVariantBundleElements[i] = o.R.FKVariantBundleElements[ln-1]
			}
			o.R.FKVariantBundleElements = o.R.FKVariantBundleElements[:ln-1]
			break
		}
	}

	return nil
}

// AddFKVariantStocks adds the given related objects to the existing relationships
// of the variant, optionally inserting them as new records.
// Appends related to o.R.FKVariantStocks.
// Sets related.R.FKVariant appropriately.
func (o *Variant) AddFKVariantStocks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Stock) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.FKVariantID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE [products].[stock] SET %s WHERE %s",
				strmangle.SetParamNames("[", "]", 1, []string{"fk_variant_id"}),
				strmangle.WhereClause("[", "]", 2, stockPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.FKVariantID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &variantR{
			FKVariantStocks: related,
		}
	} else {
		o.R.FKVariantStocks = append(o.R.FKVariantStocks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &stockR{
				FKVariant: o,
			}
		} else {
			rel.R.FKVariant = o
		}
	}
	return nil
}

// SetFKVariantStocks removes all previously related items of the
// variant replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.FKVariant's FKVariantStocks accordingly.
// Replaces o.R.FKVariantStocks with related.
// Sets related.R.FKVariant's FKVariantStocks accordingly.
func (o *Variant) SetFKVariantStocks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Stock) error {
	query := "update [products].[stock] set [fk_variant_id] = null where [fk_variant_id] = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.FKVariantStocks {
			queries.SetScanner(&rel.FKVariantID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.FKVariant = nil
		}
		o.R.FKVariantStocks = nil
	}

	return o.AddFKVariantStocks(ctx, exec, insert, related...)
}

// RemoveFKVariantStocks relationships from objects passed in.
// Removes related items from R.FKVariantStocks (uses pointer comparison, removal does not keep order)
// Sets related.R.FKVariant.
func (o *Variant) RemoveFKVariantStocks(ctx context.Context, exec boil.ContextExecutor, related ...*Stock) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.FKVariantID, nil)
		if rel.R != nil {
			rel.R.FKVariant = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("fk_variant_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.FKVariantStocks {
			if rel != ri {
				continue
			}

			ln := len(o.R.FKVariantStocks)
			if ln > 1 && i < ln-1 {
				o.R.FKVariantStocks[i] = o.R.FKVariantStocks[ln-1]
			}
			o.R.FKVariantStocks = o.R.FKVariantStocks[:ln-1]
			break
		}
	}

	return nil
}

// Variants retrieves all the records using an executor.
func Variants(mods ...qm.QueryMod) variantQuery {
	mods = append(mods, qm.From("[products].[variant]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[products].[variant].*"})
	}

	return variantQuery{q}
}

// FindVariant retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVariant(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Variant, error) {
	variantObj := &Variant{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [products].[variant] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, variantObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from variant")
	}

	if err = variantObj.doAfterSelectHooks(ctx, exec); err != nil {
		return variantObj, err
	}

	return variantObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Variant) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no variant provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(variantColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	variantInsertCacheMut.RLock()
	cache, cached := variantInsertCache[key]
	variantInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			variantAllColumns,
			variantColumnsWithDefault,
			variantColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, variantGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(variantType, variantMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(variantType, variantMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [products].[variant] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [products].[variant] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into variant")
	}

	if !cached {
		variantInsertCacheMut.Lock()
		variantInsertCache[key] = cache
		variantInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Variant.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Variant) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	variantUpdateCacheMut.RLock()
	cache, cached := variantUpdateCache[key]
	variantUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			variantAllColumns,
			variantPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, variantGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update variant, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [products].[variant] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, variantPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(variantType, variantMapping, append(wl, variantPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update variant row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for variant")
	}

	if !cached {
		variantUpdateCacheMut.Lock()
		variantUpdateCache[key] = cache
		variantUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q variantQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for variant")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for variant")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VariantSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), variantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [products].[variant] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, variantPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in variant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all variant")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Variant) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no variant provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(variantColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	variantUpsertCacheMut.RLock()
	cache, cached := variantUpsertCache[key]
	variantUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			variantAllColumns,
			variantColumnsWithDefault,
			variantColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, variantGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(variantPrimaryKeyColumns, v) && strmangle.ContainsAny(variantColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert variant, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			variantAllColumns,
			variantPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, variantGeneratedColumns)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert variant, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[products].[variant]", variantPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(variantPrimaryKeyColumns))
		copy(whitelist, variantPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(variantType, variantMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(variantType, variantMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert variant")
	}

	if !cached {
		variantUpsertCacheMut.Lock()
		variantUpsertCache[key] = cache
		variantUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Variant record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Variant) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Variant provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), variantPrimaryKeyMapping)
	sql := "DELETE FROM [products].[variant] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from variant")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for variant")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q variantQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no variantQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from variant")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for variant")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VariantSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(variantBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), variantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [products].[variant] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, variantPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from variant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for variant")
	}

	if len(variantAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Variant) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVariant(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VariantSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VariantSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), variantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [products].[variant].* FROM [products].[variant] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, variantPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VariantSlice")
	}

	*o = slice

	return nil
}

// VariantExists checks if the Variant row exists.
func VariantExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [products].[variant] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if variant exists")
	}

	return exists, nil
}

// Exists checks if the Variant row exists.
func (o *Variant) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VariantExists(ctx, exec, o.ID)
}
