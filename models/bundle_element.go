// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BundleElement is an object representing the database table.
type BundleElement struct {
	ID          int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CompanyID   int       `boil:"company_id" json:"company_id" toml:"company_id" yaml:"company_id"`
	FKBundleID  null.Int  `boil:"fk_bundle_id" json:"fk_bundle_id,omitempty" toml:"fk_bundle_id" yaml:"fk_bundle_id,omitempty"`
	FKVariantID null.Int  `boil:"fk_variant_id" json:"fk_variant_id,omitempty" toml:"fk_variant_id" yaml:"fk_variant_id,omitempty"`
	Quantity    int       `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`
	CreateTime  time.Time `boil:"create_time" json:"create_time" toml:"create_time" yaml:"create_time"`
	UpdateTime  time.Time `boil:"update_time" json:"update_time" toml:"update_time" yaml:"update_time"`
	Deleted     bool      `boil:"deleted" json:"-" toml:"deleted" yaml:"deleted"`

	R *bundleElementR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bundleElementL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BundleElementColumns = struct {
	ID          string
	CompanyID   string
	FKBundleID  string
	FKVariantID string
	Quantity    string
	CreateTime  string
	UpdateTime  string
	Deleted     string
}{
	ID:          "id",
	CompanyID:   "company_id",
	FKBundleID:  "fk_bundle_id",
	FKVariantID: "fk_variant_id",
	Quantity:    "quantity",
	CreateTime:  "create_time",
	UpdateTime:  "update_time",
	Deleted:     "deleted",
}

var BundleElementTableColumns = struct {
	ID          string
	CompanyID   string
	FKBundleID  string
	FKVariantID string
	Quantity    string
	CreateTime  string
	UpdateTime  string
	Deleted     string
}{
	ID:          "bundle_element.id",
	CompanyID:   "bundle_element.company_id",
	FKBundleID:  "bundle_element.fk_bundle_id",
	FKVariantID: "bundle_element.fk_variant_id",
	Quantity:    "bundle_element.quantity",
	CreateTime:  "bundle_element.create_time",
	UpdateTime:  "bundle_element.update_time",
	Deleted:     "bundle_element.deleted",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var BundleElementWhere = struct {
	ID          whereHelperint
	CompanyID   whereHelperint
	FKBundleID  whereHelpernull_Int
	FKVariantID whereHelpernull_Int
	Quantity    whereHelperint
	CreateTime  whereHelpertime_Time
	UpdateTime  whereHelpertime_Time
	Deleted     whereHelperbool
}{
	ID:          whereHelperint{field: "[products].[bundle_element].[id]"},
	CompanyID:   whereHelperint{field: "[products].[bundle_element].[company_id]"},
	FKBundleID:  whereHelpernull_Int{field: "[products].[bundle_element].[fk_bundle_id]"},
	FKVariantID: whereHelpernull_Int{field: "[products].[bundle_element].[fk_variant_id]"},
	Quantity:    whereHelperint{field: "[products].[bundle_element].[quantity]"},
	CreateTime:  whereHelpertime_Time{field: "[products].[bundle_element].[create_time]"},
	UpdateTime:  whereHelpertime_Time{field: "[products].[bundle_element].[update_time]"},
	Deleted:     whereHelperbool{field: "[products].[bundle_element].[deleted]"},
}

// BundleElementRels is where relationship names are stored.
var BundleElementRels = struct {
	FKBundle  string
	FKVariant string
}{
	FKBundle:  "FKBundle",
	FKVariant: "FKVariant",
}

// bundleElementR is where relationships are stored.
type bundleElementR struct {
	FKBundle  *Bundle  `boil:"FKBundle" json:"FKBundle" toml:"FKBundle" yaml:"FKBundle"`
	FKVariant *Variant `boil:"FKVariant" json:"FKVariant" toml:"FKVariant" yaml:"FKVariant"`
}

// NewStruct creates a new relationship struct
func (*bundleElementR) NewStruct() *bundleElementR {
	return &bundleElementR{}
}

func (r *bundleElementR) GetFKBundle() *Bundle {
	if r == nil {
		return nil
	}
	return r.FKBundle
}

func (r *bundleElementR) GetFKVariant() *Variant {
	if r == nil {
		return nil
	}
	return r.FKVariant
}

// bundleElementL is where Load methods for each relationship are stored.
type bundleElementL struct{}

var (
	bundleElementAllColumns            = []string{"id", "company_id", "fk_bundle_id", "fk_variant_id", "quantity", "create_time", "update_time", "deleted"}
	bundleElementColumnsWithoutDefault = []string{"company_id", "fk_bundle_id", "fk_variant_id", "quantity"}
	bundleElementColumnsWithDefault    = []string{"id", "create_time", "update_time", "deleted"}
	bundleElementPrimaryKeyColumns     = []string{"id"}
	bundleElementGeneratedColumns      = []string{"id"}
)

type (
	// BundleElementSlice is an alias for a slice of pointers to BundleElement.
	// This should almost always be used instead of []BundleElement.
	BundleElementSlice []*BundleElement
	// BundleElementHook is the signature for custom BundleElement hook methods
	BundleElementHook func(context.Context, boil.ContextExecutor, *BundleElement) error

	bundleElementQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bundleElementType                 = reflect.TypeOf(&BundleElement{})
	bundleElementMapping              = queries.MakeStructMapping(bundleElementType)
	bundleElementPrimaryKeyMapping, _ = queries.BindMapping(bundleElementType, bundleElementMapping, bundleElementPrimaryKeyColumns)
	bundleElementInsertCacheMut       sync.RWMutex
	bundleElementInsertCache          = make(map[string]insertCache)
	bundleElementUpdateCacheMut       sync.RWMutex
	bundleElementUpdateCache          = make(map[string]updateCache)
	bundleElementUpsertCacheMut       sync.RWMutex
	bundleElementUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bundleElementAfterSelectHooks []BundleElementHook

var bundleElementBeforeInsertHooks []BundleElementHook
var bundleElementAfterInsertHooks []BundleElementHook

var bundleElementBeforeUpdateHooks []BundleElementHook
var bundleElementAfterUpdateHooks []BundleElementHook

var bundleElementBeforeDeleteHooks []BundleElementHook
var bundleElementAfterDeleteHooks []BundleElementHook

var bundleElementBeforeUpsertHooks []BundleElementHook
var bundleElementAfterUpsertHooks []BundleElementHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BundleElement) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bundleElementAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BundleElement) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bundleElementBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BundleElement) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bundleElementAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BundleElement) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bundleElementBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BundleElement) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bundleElementAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BundleElement) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bundleElementBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BundleElement) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bundleElementAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BundleElement) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bundleElementBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BundleElement) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bundleElementAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBundleElementHook registers your hook function for all future operations.
func AddBundleElementHook(hookPoint boil.HookPoint, bundleElementHook BundleElementHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		bundleElementAfterSelectHooks = append(bundleElementAfterSelectHooks, bundleElementHook)
	case boil.BeforeInsertHook:
		bundleElementBeforeInsertHooks = append(bundleElementBeforeInsertHooks, bundleElementHook)
	case boil.AfterInsertHook:
		bundleElementAfterInsertHooks = append(bundleElementAfterInsertHooks, bundleElementHook)
	case boil.BeforeUpdateHook:
		bundleElementBeforeUpdateHooks = append(bundleElementBeforeUpdateHooks, bundleElementHook)
	case boil.AfterUpdateHook:
		bundleElementAfterUpdateHooks = append(bundleElementAfterUpdateHooks, bundleElementHook)
	case boil.BeforeDeleteHook:
		bundleElementBeforeDeleteHooks = append(bundleElementBeforeDeleteHooks, bundleElementHook)
	case boil.AfterDeleteHook:
		bundleElementAfterDeleteHooks = append(bundleElementAfterDeleteHooks, bundleElementHook)
	case boil.BeforeUpsertHook:
		bundleElementBeforeUpsertHooks = append(bundleElementBeforeUpsertHooks, bundleElementHook)
	case boil.AfterUpsertHook:
		bundleElementAfterUpsertHooks = append(bundleElementAfterUpsertHooks, bundleElementHook)
	}
}

// One returns a single bundleElement record from the query.
func (q bundleElementQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BundleElement, error) {
	o := &BundleElement{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bundle_element")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BundleElement records from the query.
func (q bundleElementQuery) All(ctx context.Context, exec boil.ContextExecutor) (BundleElementSlice, error) {
	var o []*BundleElement

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BundleElement slice")
	}

	if len(bundleElementAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BundleElement records in the query.
func (q bundleElementQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bundle_element rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bundleElementQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bundle_element exists")
	}

	return count > 0, nil
}

// FKBundle pointed to by the foreign key.
func (o *BundleElement) FKBundle(mods ...qm.QueryMod) bundleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("[id] = ?", o.FKBundleID),
	}

	queryMods = append(queryMods, mods...)

	return Bundles(queryMods...)
}

// FKVariant pointed to by the foreign key.
func (o *BundleElement) FKVariant(mods ...qm.QueryMod) variantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("[id] = ?", o.FKVariantID),
	}

	queryMods = append(queryMods, mods...)

	return Variants(queryMods...)
}

// LoadFKBundle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (bundleElementL) LoadFKBundle(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBundleElement interface{}, mods queries.Applicator) error {
	var slice []*BundleElement
	var object *BundleElement

	if singular {
		var ok bool
		object, ok = maybeBundleElement.(*BundleElement)
		if !ok {
			object = new(BundleElement)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBundleElement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBundleElement))
			}
		}
	} else {
		s, ok := maybeBundleElement.(*[]*BundleElement)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBundleElement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBundleElement))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bundleElementR{}
		}
		if !queries.IsNil(object.FKBundleID) {
			args = append(args, object.FKBundleID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bundleElementR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.FKBundleID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.FKBundleID) {
				args = append(args, obj.FKBundleID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products.bundle`),
		qm.WhereIn(`products.bundle.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Bundle")
	}

	var resultSlice []*Bundle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Bundle")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for bundle")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bundle")
	}

	if len(bundleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FKBundle = foreign
		if foreign.R == nil {
			foreign.R = &bundleR{}
		}
		foreign.R.FKBundleBundleElements = append(foreign.R.FKBundleBundleElements, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.FKBundleID, foreign.ID) {
				local.R.FKBundle = foreign
				if foreign.R == nil {
					foreign.R = &bundleR{}
				}
				foreign.R.FKBundleBundleElements = append(foreign.R.FKBundleBundleElements, local)
				break
			}
		}
	}

	return nil
}

// LoadFKVariant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (bundleElementL) LoadFKVariant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBundleElement interface{}, mods queries.Applicator) error {
	var slice []*BundleElement
	var object *BundleElement

	if singular {
		var ok bool
		object, ok = maybeBundleElement.(*BundleElement)
		if !ok {
			object = new(BundleElement)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBundleElement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBundleElement))
			}
		}
	} else {
		s, ok := maybeBundleElement.(*[]*BundleElement)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBundleElement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBundleElement))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bundleElementR{}
		}
		if !queries.IsNil(object.FKVariantID) {
			args = append(args, object.FKVariantID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bundleElementR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.FKVariantID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.FKVariantID) {
				args = append(args, obj.FKVariantID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products.variant`),
		qm.WhereIn(`products.variant.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Variant")
	}

	var resultSlice []*Variant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Variant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for variant")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for variant")
	}

	if len(variantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FKVariant = foreign
		if foreign.R == nil {
			foreign.R = &variantR{}
		}
		foreign.R.FKVariantBundleElements = append(foreign.R.FKVariantBundleElements, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.FKVariantID, foreign.ID) {
				local.R.FKVariant = foreign
				if foreign.R == nil {
					foreign.R = &variantR{}
				}
				foreign.R.FKVariantBundleElements = append(foreign.R.FKVariantBundleElements, local)
				break
			}
		}
	}

	return nil
}

// SetFKBundle of the bundleElement to the related item.
// Sets o.R.FKBundle to related.
// Adds o to related.R.FKBundleBundleElements.
func (o *BundleElement) SetFKBundle(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Bundle) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE [products].[bundle_element] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, []string{"fk_bundle_id"}),
		strmangle.WhereClause("[", "]", 2, bundleElementPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.FKBundleID, related.ID)
	if o.R == nil {
		o.R = &bundleElementR{
			FKBundle: related,
		}
	} else {
		o.R.FKBundle = related
	}

	if related.R == nil {
		related.R = &bundleR{
			FKBundleBundleElements: BundleElementSlice{o},
		}
	} else {
		related.R.FKBundleBundleElements = append(related.R.FKBundleBundleElements, o)
	}

	return nil
}

// RemoveFKBundle relationship.
// Sets o.R.FKBundle to nil.
// Removes o from all passed in related items' relationships struct.
func (o *BundleElement) RemoveFKBundle(ctx context.Context, exec boil.ContextExecutor, related *Bundle) error {
	var err error

	queries.SetScanner(&o.FKBundleID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("fk_bundle_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.FKBundle = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.FKBundleBundleElements {
		if queries.Equal(o.FKBundleID, ri.FKBundleID) {
			continue
		}

		ln := len(related.R.FKBundleBundleElements)
		if ln > 1 && i < ln-1 {
			related.R.FKBundleBundleElements[i] = related.R.FKBundleBundleElements[ln-1]
		}
		related.R.FKBundleBundleElements = related.R.FKBundleBundleElements[:ln-1]
		break
	}
	return nil
}

// SetFKVariant of the bundleElement to the related item.
// Sets o.R.FKVariant to related.
// Adds o to related.R.FKVariantBundleElements.
func (o *BundleElement) SetFKVariant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Variant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE [products].[bundle_element] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, []string{"fk_variant_id"}),
		strmangle.WhereClause("[", "]", 2, bundleElementPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.FKVariantID, related.ID)
	if o.R == nil {
		o.R = &bundleElementR{
			FKVariant: related,
		}
	} else {
		o.R.FKVariant = related
	}

	if related.R == nil {
		related.R = &variantR{
			FKVariantBundleElements: BundleElementSlice{o},
		}
	} else {
		related.R.FKVariantBundleElements = append(related.R.FKVariantBundleElements, o)
	}

	return nil
}

// RemoveFKVariant relationship.
// Sets o.R.FKVariant to nil.
// Removes o from all passed in related items' relationships struct.
func (o *BundleElement) RemoveFKVariant(ctx context.Context, exec boil.ContextExecutor, related *Variant) error {
	var err error

	queries.SetScanner(&o.FKVariantID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("fk_variant_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.FKVariant = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.FKVariantBundleElements {
		if queries.Equal(o.FKVariantID, ri.FKVariantID) {
			continue
		}

		ln := len(related.R.FKVariantBundleElements)
		if ln > 1 && i < ln-1 {
			related.R.FKVariantBundleElements[i] = related.R.FKVariantBundleElements[ln-1]
		}
		related.R.FKVariantBundleElements = related.R.FKVariantBundleElements[:ln-1]
		break
	}
	return nil
}

// BundleElements retrieves all the records using an executor.
func BundleElements(mods ...qm.QueryMod) bundleElementQuery {
	mods = append(mods, qm.From("[products].[bundle_element]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[products].[bundle_element].*"})
	}

	return bundleElementQuery{q}
}

// FindBundleElement retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBundleElement(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*BundleElement, error) {
	bundleElementObj := &BundleElement{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [products].[bundle_element] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, bundleElementObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bundle_element")
	}

	if err = bundleElementObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bundleElementObj, err
	}

	return bundleElementObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BundleElement) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bundle_element provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bundleElementColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bundleElementInsertCacheMut.RLock()
	cache, cached := bundleElementInsertCache[key]
	bundleElementInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bundleElementAllColumns,
			bundleElementColumnsWithDefault,
			bundleElementColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, bundleElementGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(bundleElementType, bundleElementMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bundleElementType, bundleElementMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [products].[bundle_element] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [products].[bundle_element] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bundle_element")
	}

	if !cached {
		bundleElementInsertCacheMut.Lock()
		bundleElementInsertCache[key] = cache
		bundleElementInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BundleElement.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BundleElement) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bundleElementUpdateCacheMut.RLock()
	cache, cached := bundleElementUpdateCache[key]
	bundleElementUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bundleElementAllColumns,
			bundleElementPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, bundleElementGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bundle_element, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [products].[bundle_element] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, bundleElementPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bundleElementType, bundleElementMapping, append(wl, bundleElementPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bundle_element row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bundle_element")
	}

	if !cached {
		bundleElementUpdateCacheMut.Lock()
		bundleElementUpdateCache[key] = cache
		bundleElementUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bundleElementQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bundle_element")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bundle_element")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BundleElementSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bundleElementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [products].[bundle_element] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, bundleElementPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in bundleElement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all bundleElement")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *BundleElement) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bundle_element provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bundleElementColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bundleElementUpsertCacheMut.RLock()
	cache, cached := bundleElementUpsertCache[key]
	bundleElementUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			bundleElementAllColumns,
			bundleElementColumnsWithDefault,
			bundleElementColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, bundleElementGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(bundleElementPrimaryKeyColumns, v) && strmangle.ContainsAny(bundleElementColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert bundle_element, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			bundleElementAllColumns,
			bundleElementPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, bundleElementGeneratedColumns)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert bundle_element, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[products].[bundle_element]", bundleElementPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(bundleElementPrimaryKeyColumns))
		copy(whitelist, bundleElementPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(bundleElementType, bundleElementMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bundleElementType, bundleElementMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert bundle_element")
	}

	if !cached {
		bundleElementUpsertCacheMut.Lock()
		bundleElementUpsertCache[key] = cache
		bundleElementUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BundleElement record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BundleElement) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BundleElement provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bundleElementPrimaryKeyMapping)
	sql := "DELETE FROM [products].[bundle_element] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bundle_element")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bundle_element")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bundleElementQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bundleElementQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bundle_element")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bundle_element")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BundleElementSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bundleElementBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bundleElementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [products].[bundle_element] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bundleElementPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bundleElement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bundle_element")
	}

	if len(bundleElementAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BundleElement) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBundleElement(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BundleElementSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BundleElementSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bundleElementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [products].[bundle_element].* FROM [products].[bundle_element] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bundleElementPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BundleElementSlice")
	}

	*o = slice

	return nil
}

// BundleElementExists checks if the BundleElement row exists.
func BundleElementExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [products].[bundle_element] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bundle_element exists")
	}

	return exists, nil
}

// Exists checks if the BundleElement row exists.
func (o *BundleElement) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BundleElementExists(ctx, exec, o.ID)
}
