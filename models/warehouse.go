// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Warehouse is an object representing the database table.
type Warehouse struct {
	ID         int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	CompanyID  int         `boil:"company_id" json:"company_id" toml:"company_id" yaml:"company_id"`
	Name       string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Address    string      `boil:"address" json:"address" toml:"address" yaml:"address"`
	Complement null.String `boil:"complement" json:"complement,omitempty" toml:"complement" yaml:"complement,omitempty"`
	Zip        string      `boil:"zip" json:"zip" toml:"zip" yaml:"zip"`
	City       string      `boil:"city" json:"city" toml:"city" yaml:"city"`
	Region     string      `boil:"region" json:"region" toml:"region" yaml:"region"`
	Country    string      `boil:"country" json:"country" toml:"country" yaml:"country"`
	Manager    string      `boil:"manager" json:"manager" toml:"manager" yaml:"manager"`
	Phone      string      `boil:"phone" json:"phone" toml:"phone" yaml:"phone"`
	Email      string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	CreateTime time.Time   `boil:"create_time" json:"create_time" toml:"create_time" yaml:"create_time"`
	UpdateTime time.Time   `boil:"update_time" json:"update_time" toml:"update_time" yaml:"update_time"`

	R *warehouseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L warehouseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WarehouseColumns = struct {
	ID         string
	CompanyID  string
	Name       string
	Address    string
	Complement string
	Zip        string
	City       string
	Region     string
	Country    string
	Manager    string
	Phone      string
	Email      string
	CreateTime string
	UpdateTime string
}{
	ID:         "id",
	CompanyID:  "company_id",
	Name:       "name",
	Address:    "address",
	Complement: "complement",
	Zip:        "zip",
	City:       "city",
	Region:     "region",
	Country:    "country",
	Manager:    "manager",
	Phone:      "phone",
	Email:      "email",
	CreateTime: "create_time",
	UpdateTime: "update_time",
}

var WarehouseTableColumns = struct {
	ID         string
	CompanyID  string
	Name       string
	Address    string
	Complement string
	Zip        string
	City       string
	Region     string
	Country    string
	Manager    string
	Phone      string
	Email      string
	CreateTime string
	UpdateTime string
}{
	ID:         "warehouse.id",
	CompanyID:  "warehouse.company_id",
	Name:       "warehouse.name",
	Address:    "warehouse.address",
	Complement: "warehouse.complement",
	Zip:        "warehouse.zip",
	City:       "warehouse.city",
	Region:     "warehouse.region",
	Country:    "warehouse.country",
	Manager:    "warehouse.manager",
	Phone:      "warehouse.phone",
	Email:      "warehouse.email",
	CreateTime: "warehouse.create_time",
	UpdateTime: "warehouse.update_time",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var WarehouseWhere = struct {
	ID         whereHelperint
	CompanyID  whereHelperint
	Name       whereHelperstring
	Address    whereHelperstring
	Complement whereHelpernull_String
	Zip        whereHelperstring
	City       whereHelperstring
	Region     whereHelperstring
	Country    whereHelperstring
	Manager    whereHelperstring
	Phone      whereHelperstring
	Email      whereHelperstring
	CreateTime whereHelpertime_Time
	UpdateTime whereHelpertime_Time
}{
	ID:         whereHelperint{field: "[products].[warehouse].[id]"},
	CompanyID:  whereHelperint{field: "[products].[warehouse].[company_id]"},
	Name:       whereHelperstring{field: "[products].[warehouse].[name]"},
	Address:    whereHelperstring{field: "[products].[warehouse].[address]"},
	Complement: whereHelpernull_String{field: "[products].[warehouse].[complement]"},
	Zip:        whereHelperstring{field: "[products].[warehouse].[zip]"},
	City:       whereHelperstring{field: "[products].[warehouse].[city]"},
	Region:     whereHelperstring{field: "[products].[warehouse].[region]"},
	Country:    whereHelperstring{field: "[products].[warehouse].[country]"},
	Manager:    whereHelperstring{field: "[products].[warehouse].[manager]"},
	Phone:      whereHelperstring{field: "[products].[warehouse].[phone]"},
	Email:      whereHelperstring{field: "[products].[warehouse].[email]"},
	CreateTime: whereHelpertime_Time{field: "[products].[warehouse].[create_time]"},
	UpdateTime: whereHelpertime_Time{field: "[products].[warehouse].[update_time]"},
}

// WarehouseRels is where relationship names are stored.
var WarehouseRels = struct {
	FKWarehouseStocks string
}{
	FKWarehouseStocks: "FKWarehouseStocks",
}

// warehouseR is where relationships are stored.
type warehouseR struct {
	FKWarehouseStocks StockSlice `boil:"FKWarehouseStocks" json:"FKWarehouseStocks" toml:"FKWarehouseStocks" yaml:"FKWarehouseStocks"`
}

// NewStruct creates a new relationship struct
func (*warehouseR) NewStruct() *warehouseR {
	return &warehouseR{}
}

func (r *warehouseR) GetFKWarehouseStocks() StockSlice {
	if r == nil {
		return nil
	}
	return r.FKWarehouseStocks
}

// warehouseL is where Load methods for each relationship are stored.
type warehouseL struct{}

var (
	warehouseAllColumns            = []string{"id", "company_id", "name", "address", "complement", "zip", "city", "region", "country", "manager", "phone", "email", "create_time", "update_time"}
	warehouseColumnsWithoutDefault = []string{"company_id", "name", "address", "complement", "zip", "city", "region", "country", "manager", "phone", "email"}
	warehouseColumnsWithDefault    = []string{"id", "create_time", "update_time"}
	warehousePrimaryKeyColumns     = []string{"id"}
	warehouseGeneratedColumns      = []string{"id"}
)

type (
	// WarehouseSlice is an alias for a slice of pointers to Warehouse.
	// This should almost always be used instead of []Warehouse.
	WarehouseSlice []*Warehouse
	// WarehouseHook is the signature for custom Warehouse hook methods
	WarehouseHook func(context.Context, boil.ContextExecutor, *Warehouse) error

	warehouseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	warehouseType                 = reflect.TypeOf(&Warehouse{})
	warehouseMapping              = queries.MakeStructMapping(warehouseType)
	warehousePrimaryKeyMapping, _ = queries.BindMapping(warehouseType, warehouseMapping, warehousePrimaryKeyColumns)
	warehouseInsertCacheMut       sync.RWMutex
	warehouseInsertCache          = make(map[string]insertCache)
	warehouseUpdateCacheMut       sync.RWMutex
	warehouseUpdateCache          = make(map[string]updateCache)
	warehouseUpsertCacheMut       sync.RWMutex
	warehouseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var warehouseAfterSelectHooks []WarehouseHook

var warehouseBeforeInsertHooks []WarehouseHook
var warehouseAfterInsertHooks []WarehouseHook

var warehouseBeforeUpdateHooks []WarehouseHook
var warehouseAfterUpdateHooks []WarehouseHook

var warehouseBeforeDeleteHooks []WarehouseHook
var warehouseAfterDeleteHooks []WarehouseHook

var warehouseBeforeUpsertHooks []WarehouseHook
var warehouseAfterUpsertHooks []WarehouseHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Warehouse) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Warehouse) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Warehouse) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Warehouse) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Warehouse) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Warehouse) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Warehouse) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Warehouse) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Warehouse) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWarehouseHook registers your hook function for all future operations.
func AddWarehouseHook(hookPoint boil.HookPoint, warehouseHook WarehouseHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		warehouseAfterSelectHooks = append(warehouseAfterSelectHooks, warehouseHook)
	case boil.BeforeInsertHook:
		warehouseBeforeInsertHooks = append(warehouseBeforeInsertHooks, warehouseHook)
	case boil.AfterInsertHook:
		warehouseAfterInsertHooks = append(warehouseAfterInsertHooks, warehouseHook)
	case boil.BeforeUpdateHook:
		warehouseBeforeUpdateHooks = append(warehouseBeforeUpdateHooks, warehouseHook)
	case boil.AfterUpdateHook:
		warehouseAfterUpdateHooks = append(warehouseAfterUpdateHooks, warehouseHook)
	case boil.BeforeDeleteHook:
		warehouseBeforeDeleteHooks = append(warehouseBeforeDeleteHooks, warehouseHook)
	case boil.AfterDeleteHook:
		warehouseAfterDeleteHooks = append(warehouseAfterDeleteHooks, warehouseHook)
	case boil.BeforeUpsertHook:
		warehouseBeforeUpsertHooks = append(warehouseBeforeUpsertHooks, warehouseHook)
	case boil.AfterUpsertHook:
		warehouseAfterUpsertHooks = append(warehouseAfterUpsertHooks, warehouseHook)
	}
}

// One returns a single warehouse record from the query.
func (q warehouseQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Warehouse, error) {
	o := &Warehouse{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for warehouse")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Warehouse records from the query.
func (q warehouseQuery) All(ctx context.Context, exec boil.ContextExecutor) (WarehouseSlice, error) {
	var o []*Warehouse

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Warehouse slice")
	}

	if len(warehouseAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Warehouse records in the query.
func (q warehouseQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count warehouse rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q warehouseQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if warehouse exists")
	}

	return count > 0, nil
}

// FKWarehouseStocks retrieves all the stock's Stocks with an executor via fk_warehouse_id column.
func (o *Warehouse) FKWarehouseStocks(mods ...qm.QueryMod) stockQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("[products].[stock].[fk_warehouse_id]=?", o.ID),
	)

	return Stocks(queryMods...)
}

// LoadFKWarehouseStocks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (warehouseL) LoadFKWarehouseStocks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWarehouse interface{}, mods queries.Applicator) error {
	var slice []*Warehouse
	var object *Warehouse

	if singular {
		var ok bool
		object, ok = maybeWarehouse.(*Warehouse)
		if !ok {
			object = new(Warehouse)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWarehouse))
			}
		}
	} else {
		s, ok := maybeWarehouse.(*[]*Warehouse)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWarehouse))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &warehouseR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &warehouseR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products.stock`),
		qm.WhereIn(`products.stock.fk_warehouse_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load stock")
	}

	var resultSlice []*Stock
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice stock")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on stock")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stock")
	}

	if len(stockAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FKWarehouseStocks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &stockR{}
			}
			foreign.R.FKWarehouse = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FKWarehouseID {
				local.R.FKWarehouseStocks = append(local.R.FKWarehouseStocks, foreign)
				if foreign.R == nil {
					foreign.R = &stockR{}
				}
				foreign.R.FKWarehouse = local
				break
			}
		}
	}

	return nil
}

// AddFKWarehouseStocks adds the given related objects to the existing relationships
// of the warehouse, optionally inserting them as new records.
// Appends related to o.R.FKWarehouseStocks.
// Sets related.R.FKWarehouse appropriately.
func (o *Warehouse) AddFKWarehouseStocks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Stock) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FKWarehouseID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE [products].[stock] SET %s WHERE %s",
				strmangle.SetParamNames("[", "]", 1, []string{"fk_warehouse_id"}),
				strmangle.WhereClause("[", "]", 2, stockPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FKWarehouseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &warehouseR{
			FKWarehouseStocks: related,
		}
	} else {
		o.R.FKWarehouseStocks = append(o.R.FKWarehouseStocks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &stockR{
				FKWarehouse: o,
			}
		} else {
			rel.R.FKWarehouse = o
		}
	}
	return nil
}

// Warehouses retrieves all the records using an executor.
func Warehouses(mods ...qm.QueryMod) warehouseQuery {
	mods = append(mods, qm.From("[products].[warehouse]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[products].[warehouse].*"})
	}

	return warehouseQuery{q}
}

// FindWarehouse retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWarehouse(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Warehouse, error) {
	warehouseObj := &Warehouse{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [products].[warehouse] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, warehouseObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from warehouse")
	}

	if err = warehouseObj.doAfterSelectHooks(ctx, exec); err != nil {
		return warehouseObj, err
	}

	return warehouseObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Warehouse) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no warehouse provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(warehouseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	warehouseInsertCacheMut.RLock()
	cache, cached := warehouseInsertCache[key]
	warehouseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			warehouseAllColumns,
			warehouseColumnsWithDefault,
			warehouseColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, warehouseGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(warehouseType, warehouseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(warehouseType, warehouseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [products].[warehouse] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [products].[warehouse] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into warehouse")
	}

	if !cached {
		warehouseInsertCacheMut.Lock()
		warehouseInsertCache[key] = cache
		warehouseInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Warehouse.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Warehouse) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	warehouseUpdateCacheMut.RLock()
	cache, cached := warehouseUpdateCache[key]
	warehouseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			warehouseAllColumns,
			warehousePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, warehouseGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update warehouse, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [products].[warehouse] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, warehousePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(warehouseType, warehouseMapping, append(wl, warehousePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update warehouse row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for warehouse")
	}

	if !cached {
		warehouseUpdateCacheMut.Lock()
		warehouseUpdateCache[key] = cache
		warehouseUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q warehouseQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for warehouse")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for warehouse")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WarehouseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), warehousePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [products].[warehouse] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, warehousePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in warehouse slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all warehouse")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Warehouse) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no warehouse provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(warehouseColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	warehouseUpsertCacheMut.RLock()
	cache, cached := warehouseUpsertCache[key]
	warehouseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			warehouseAllColumns,
			warehouseColumnsWithDefault,
			warehouseColumnsWithoutDefault,
			nzDefaults,
		)

		insert = strmangle.SetComplement(insert, warehouseGeneratedColumns)

		for i, v := range insert {
			if strmangle.ContainsAny(warehousePrimaryKeyColumns, v) && strmangle.ContainsAny(warehouseColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert warehouse, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			warehouseAllColumns,
			warehousePrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, warehouseGeneratedColumns)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert warehouse, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[products].[warehouse]", warehousePrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(warehousePrimaryKeyColumns))
		copy(whitelist, warehousePrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(warehouseType, warehouseMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(warehouseType, warehouseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert warehouse")
	}

	if !cached {
		warehouseUpsertCacheMut.Lock()
		warehouseUpsertCache[key] = cache
		warehouseUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Warehouse record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Warehouse) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Warehouse provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), warehousePrimaryKeyMapping)
	sql := "DELETE FROM [products].[warehouse] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from warehouse")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for warehouse")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q warehouseQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no warehouseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from warehouse")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for warehouse")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WarehouseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(warehouseBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), warehousePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [products].[warehouse] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, warehousePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from warehouse slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for warehouse")
	}

	if len(warehouseAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Warehouse) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWarehouse(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WarehouseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WarehouseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), warehousePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [products].[warehouse].* FROM [products].[warehouse] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, warehousePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WarehouseSlice")
	}

	*o = slice

	return nil
}

// WarehouseExists checks if the Warehouse row exists.
func WarehouseExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [products].[warehouse] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if warehouse exists")
	}

	return exists, nil
}

// Exists checks if the Warehouse row exists.
func (o *Warehouse) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return WarehouseExists(ctx, exec, o.ID)
}
